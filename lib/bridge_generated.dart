// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

class SpBackendImpl implements SpBackend {
  final SpBackendPlatform _platform;
  factory SpBackendImpl(ExternalLibrary dylib) =>
      SpBackendImpl.raw(SpBackendPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory SpBackendImpl.wasm(FutureOr<WasmModule> module) =>
      SpBackendImpl(module as ExternalLibrary);
  SpBackendImpl.raw(this._platform);
  Stream<LogEntry> createLogStream(
      {required LogLevel level, required bool logDependencies, dynamic hint}) {
    var arg0 = api2wire_log_level(level);
    var arg1 = logDependencies;
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_create_log_stream(port_, arg0, arg1),
      parseSuccessData: _wire2api_log_entry,
      parseErrorData: null,
      constMeta: kCreateLogStreamConstMeta,
      argValues: [level, logDependencies],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateLogStreamConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_log_stream",
        argNames: ["level", "logDependencies"],
      );

  Stream<SyncStatus> createSyncStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_sync_stream(port_),
      parseSuccessData: _wire2api_sync_status,
      parseErrorData: null,
      constMeta: kCreateSyncStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateSyncStreamConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_sync_stream",
        argNames: [],
      );

  Stream<ScanProgress> createScanProgressStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_create_scan_progress_stream(port_),
      parseSuccessData: _wire2api_scan_progress,
      parseErrorData: null,
      constMeta: kCreateScanProgressStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateScanProgressStreamConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_scan_progress_stream",
        argNames: [],
      );

  Stream<int> createAmountStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_amount_stream(port_),
      parseSuccessData: _wire2api_u64,
      parseErrorData: null,
      constMeta: kCreateAmountStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateAmountStreamConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_amount_stream",
        argNames: [],
      );

  Stream<bool> createNakamotoRunStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_create_nakamoto_run_stream(port_),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kCreateNakamotoRunStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateNakamotoRunStreamConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_nakamoto_run_stream",
        argNames: [],
      );

  Future<bool> walletExists(
      {required String label, required String filesDir, dynamic hint}) {
    var arg0 = _platform.api2wire_String(label);
    var arg1 = _platform.api2wire_String(filesDir);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_wallet_exists(port_, arg0, arg1),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kWalletExistsConstMeta,
      argValues: [label, filesDir],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kWalletExistsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "wallet_exists",
        argNames: ["label", "filesDir"],
      );

  Future<void> setupNakamoto(
      {required String network, required String path, dynamic hint}) {
    var arg0 = _platform.api2wire_String(network);
    var arg1 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_setup_nakamoto(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_String,
      constMeta: kSetupNakamotoConstMeta,
      argValues: [network, path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetupNakamotoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "setup_nakamoto",
        argNames: ["network", "path"],
      );

  Future<void> cleanNakamoto({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_clean_nakamoto(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_String,
      constMeta: kCleanNakamotoConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCleanNakamotoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "clean_nakamoto",
        argNames: [],
      );

  Future<String> setup(
      {required String label,
      required String filesDir,
      required WalletType walletType,
      required int birthday,
      required bool isTestnet,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(label);
    var arg1 = _platform.api2wire_String(filesDir);
    var arg2 = _platform.api2wire_box_autoadd_wallet_type(walletType);
    var arg3 = api2wire_u32(birthday);
    var arg4 = isTestnet;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_setup(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_String,
      constMeta: kSetupConstMeta,
      argValues: [label, filesDir, walletType, birthday, isTestnet],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetupConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "setup",
        argNames: ["label", "filesDir", "walletType", "birthday", "isTestnet"],
      );

  Future<void> changeBirthday(
      {required String path,
      required String label,
      required int birthday,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    var arg1 = _platform.api2wire_String(label);
    var arg2 = api2wire_u32(birthday);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_change_birthday(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_String,
      constMeta: kChangeBirthdayConstMeta,
      argValues: [path, label, birthday],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kChangeBirthdayConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "change_birthday",
        argNames: ["path", "label", "birthday"],
      );

  Future<void> resetWallet(
      {required String path, required String label, dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    var arg1 = _platform.api2wire_String(label);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_reset_wallet(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_String,
      constMeta: kResetWalletConstMeta,
      argValues: [path, label],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kResetWalletConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "reset_wallet",
        argNames: ["path", "label"],
      );

  Future<void> removeWallet(
      {required String path, required String label, dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    var arg1 = _platform.api2wire_String(label);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_remove_wallet(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_String,
      constMeta: kRemoveWalletConstMeta,
      argValues: [path, label],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoveWalletConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remove_wallet",
        argNames: ["path", "label"],
      );

  Future<void> syncBlockchain({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sync_blockchain(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_String,
      constMeta: kSyncBlockchainConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncBlockchainConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_blockchain",
        argNames: [],
      );

  Future<void> scanToTip(
      {required String path, required String label, dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    var arg1 = _platform.api2wire_String(label);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_scan_to_tip(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_String,
      constMeta: kScanToTipConstMeta,
      argValues: [path, label],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kScanToTipConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "scan_to_tip",
        argNames: ["path", "label"],
      );

  Future<WalletStatus> getWalletInfo(
      {required String path, required String label, dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    var arg1 = _platform.api2wire_String(label);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_wallet_info(port_, arg0, arg1),
      parseSuccessData: _wire2api_wallet_status,
      parseErrorData: _wire2api_String,
      constMeta: kGetWalletInfoConstMeta,
      argValues: [path, label],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetWalletInfoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_wallet_info",
        argNames: ["path", "label"],
      );

  Future<String> getReceivingAddress(
      {required String path, required String label, dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    var arg1 = _platform.api2wire_String(label);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_receiving_address(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_String,
      constMeta: kGetReceivingAddressConstMeta,
      argValues: [path, label],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetReceivingAddressConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_receiving_address",
        argNames: ["path", "label"],
      );

  Future<List<OwnedOutput>> getSpendableOutputs(
      {required String path, required String label, dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    var arg1 = _platform.api2wire_String(label);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_spendable_outputs(port_, arg0, arg1),
      parseSuccessData: _wire2api_list_owned_output,
      parseErrorData: _wire2api_String,
      constMeta: kGetSpendableOutputsConstMeta,
      argValues: [path, label],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetSpendableOutputsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_spendable_outputs",
        argNames: ["path", "label"],
      );

  Future<List<OwnedOutput>> getOutputs(
      {required String path, required String label, dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    var arg1 = _platform.api2wire_String(label);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_outputs(port_, arg0, arg1),
      parseSuccessData: _wire2api_list_owned_output,
      parseErrorData: _wire2api_String,
      constMeta: kGetOutputsConstMeta,
      argValues: [path, label],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetOutputsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_outputs",
        argNames: ["path", "label"],
      );

  Future<String> createNewPsbt(
      {required String label,
      required String path,
      required List<OwnedOutput> inputs,
      required List<Recipient> recipients,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(label);
    var arg1 = _platform.api2wire_String(path);
    var arg2 = _platform.api2wire_list_owned_output(inputs);
    var arg3 = _platform.api2wire_list_recipient(recipients);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_create_new_psbt(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_String,
      constMeta: kCreateNewPsbtConstMeta,
      argValues: [label, path, inputs, recipients],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateNewPsbtConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_new_psbt",
        argNames: ["label", "path", "inputs", "recipients"],
      );

  Future<String> addFeeForFeeRate(
      {required String psbt,
      required int feeRate,
      required String payer,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(psbt);
    var arg1 = api2wire_u32(feeRate);
    var arg2 = _platform.api2wire_String(payer);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_add_fee_for_fee_rate(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_String,
      constMeta: kAddFeeForFeeRateConstMeta,
      argValues: [psbt, feeRate, payer],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddFeeForFeeRateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add_fee_for_fee_rate",
        argNames: ["psbt", "feeRate", "payer"],
      );

  Future<String> fillSpOutputs(
      {required String path,
      required String label,
      required String psbt,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    var arg1 = _platform.api2wire_String(label);
    var arg2 = _platform.api2wire_String(psbt);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_fill_sp_outputs(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_String,
      constMeta: kFillSpOutputsConstMeta,
      argValues: [path, label, psbt],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFillSpOutputsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "fill_sp_outputs",
        argNames: ["path", "label", "psbt"],
      );

  Future<String> signPsbt(
      {required String path,
      required String label,
      required String psbt,
      required bool finalize,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    var arg1 = _platform.api2wire_String(label);
    var arg2 = _platform.api2wire_String(psbt);
    var arg3 = finalize;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_sign_psbt(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_String,
      constMeta: kSignPsbtConstMeta,
      argValues: [path, label, psbt, finalize],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSignPsbtConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sign_psbt",
        argNames: ["path", "label", "psbt", "finalize"],
      );

  Future<String> extractTxFromPsbt({required String psbt, dynamic hint}) {
    var arg0 = _platform.api2wire_String(psbt);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_extract_tx_from_psbt(port_, arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_String,
      constMeta: kExtractTxFromPsbtConstMeta,
      argValues: [psbt],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kExtractTxFromPsbtConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "extract_tx_from_psbt",
        argNames: ["psbt"],
      );

  Future<String> broadcastTx({required String tx, dynamic hint}) {
    var arg0 = _platform.api2wire_String(tx);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_broadcast_tx(port_, arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_String,
      constMeta: kBroadcastTxConstMeta,
      argValues: [tx],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBroadcastTxConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "broadcast_tx",
        argNames: ["tx"],
      );

  Future<void> markTransactionInputsAsSpent(
      {required String path,
      required String label,
      required String tx,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    var arg1 = _platform.api2wire_String(label);
    var arg2 = _platform.api2wire_String(tx);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_mark_transaction_inputs_as_spent(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_String,
      constMeta: kMarkTransactionInputsAsSpentConstMeta,
      argValues: [path, label, tx],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMarkTransactionInputsAsSpentConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mark_transaction_inputs_as_spent",
        argNames: ["path", "label", "tx"],
      );

  Future<String?> showMnemonic(
      {required String path, required String label, dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    var arg1 = _platform.api2wire_String(label);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_show_mnemonic(port_, arg0, arg1),
      parseSuccessData: _wire2api_opt_String,
      parseErrorData: _wire2api_String,
      constMeta: kShowMnemonicConstMeta,
      argValues: [path, label],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kShowMnemonicConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "show_mnemonic",
        argNames: ["path", "label"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  List<OwnedOutput> _wire2api_list_owned_output(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_owned_output).toList();
  }

  LogEntry _wire2api_log_entry(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return LogEntry(
      timeMillis: _wire2api_i64(arr[0]),
      level: _wire2api_String(arr[1]),
      tag: _wire2api_String(arr[2]),
      msg: _wire2api_String(arr[3]),
    );
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  OutputSpendStatus _wire2api_output_spend_status(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return OutputSpendStatus_Unspent();
      case 1:
        return OutputSpendStatus_Spent(
          _wire2api_String(raw[1]),
        );
      case 2:
        return OutputSpendStatus_Mined(
          _wire2api_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  OwnedOutput _wire2api_owned_output(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return OwnedOutput(
      txoutpoint: _wire2api_String(arr[0]),
      blockheight: _wire2api_u32(arr[1]),
      tweak: _wire2api_String(arr[2]),
      amount: _wire2api_u64(arr[3]),
      script: _wire2api_String(arr[4]),
      label: _wire2api_opt_String(arr[5]),
      spendStatus: _wire2api_output_spend_status(arr[6]),
    );
  }

  ScanProgress _wire2api_scan_progress(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ScanProgress(
      start: _wire2api_u32(arr[0]),
      current: _wire2api_u32(arr[1]),
      end: _wire2api_u32(arr[2]),
    );
  }

  SyncStatus _wire2api_sync_status(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return SyncStatus(
      peerCount: _wire2api_u32(arr[0]),
      blockheight: _wire2api_u64(arr[1]),
      bestblockhash: _wire2api_String(arr[2]),
    );
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  WalletStatus _wire2api_wallet_status(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return WalletStatus(
      amount: _wire2api_u64(arr[0]),
      birthday: _wire2api_u32(arr[1]),
      scanHeight: _wire2api_u32(arr[2]),
    );
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_log_level(LogLevel raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class SpBackendPlatform extends FlutterRustBridgeBase<SpBackendWire> {
  SpBackendPlatform(ffi.DynamicLibrary dylib) : super(SpBackendWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_WalletType> api2wire_box_autoadd_wallet_type(
      WalletType raw) {
    final ptr = inner.new_box_autoadd_wallet_type_0();
    _api_fill_to_wire_wallet_type(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_list_owned_output> api2wire_list_owned_output(
      List<OwnedOutput> raw) {
    final ans = inner.new_list_owned_output_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_owned_output(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_recipient> api2wire_list_recipient(
      List<Recipient> raw) {
    final ans = inner.new_list_recipient_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_recipient(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_wallet_type(
      WalletType apiObj, ffi.Pointer<wire_WalletType> wireObj) {
    _api_fill_to_wire_wallet_type(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_output_spend_status(
      OutputSpendStatus apiObj, wire_OutputSpendStatus wireObj) {
    if (apiObj is OutputSpendStatus_Unspent) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is OutputSpendStatus_Spent) {
      var pre_field0 = api2wire_String(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_OutputSpendStatus_Spent();
      wireObj.kind.ref.Spent.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is OutputSpendStatus_Mined) {
      var pre_field0 = api2wire_String(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_OutputSpendStatus_Mined();
      wireObj.kind.ref.Mined.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_owned_output(
      OwnedOutput apiObj, wire_OwnedOutput wireObj) {
    wireObj.txoutpoint = api2wire_String(apiObj.txoutpoint);
    wireObj.blockheight = api2wire_u32(apiObj.blockheight);
    wireObj.tweak = api2wire_String(apiObj.tweak);
    wireObj.amount = api2wire_u64(apiObj.amount);
    wireObj.script = api2wire_String(apiObj.script);
    wireObj.label = api2wire_opt_String(apiObj.label);
    _api_fill_to_wire_output_spend_status(
        apiObj.spendStatus, wireObj.spend_status);
  }

  void _api_fill_to_wire_recipient(Recipient apiObj, wire_Recipient wireObj) {
    wireObj.address = api2wire_String(apiObj.address);
    wireObj.amount = api2wire_u64(apiObj.amount);
    wireObj.nb_outputs = api2wire_u32(apiObj.nbOutputs);
  }

  void _api_fill_to_wire_wallet_type(
      WalletType apiObj, wire_WalletType wireObj) {
    if (apiObj is WalletType_New) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is WalletType_Mnemonic) {
      var pre_field0 = api2wire_String(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_WalletType_Mnemonic();
      wireObj.kind.ref.Mnemonic.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is WalletType_PrivateKeys) {
      var pre_field0 = api2wire_String(apiObj.field0);
      var pre_field1 = api2wire_String(apiObj.field1);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_WalletType_PrivateKeys();
      wireObj.kind.ref.PrivateKeys.ref.field0 = pre_field0;
      wireObj.kind.ref.PrivateKeys.ref.field1 = pre_field1;
      return;
    }
    if (apiObj is WalletType_ReadOnly) {
      var pre_field0 = api2wire_String(apiObj.field0);
      var pre_field1 = api2wire_String(apiObj.field1);
      wireObj.tag = 3;
      wireObj.kind = inner.inflate_WalletType_ReadOnly();
      wireObj.kind.ref.ReadOnly.ref.field0 = pre_field0;
      wireObj.kind.ref.ReadOnly.ref.field1 = pre_field1;
      return;
    }
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class SpBackendWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SpBackendWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SpBackendWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_create_log_stream(
    int port_,
    int level,
    bool log_dependencies,
  ) {
    return _wire_create_log_stream(
      port_,
      level,
      log_dependencies,
    );
  }

  late final _wire_create_log_streamPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Bool)>>(
      'wire_create_log_stream');
  late final _wire_create_log_stream =
      _wire_create_log_streamPtr.asFunction<void Function(int, int, bool)>();

  void wire_create_sync_stream(
    int port_,
  ) {
    return _wire_create_sync_stream(
      port_,
    );
  }

  late final _wire_create_sync_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_create_sync_stream');
  late final _wire_create_sync_stream =
      _wire_create_sync_streamPtr.asFunction<void Function(int)>();

  void wire_create_scan_progress_stream(
    int port_,
  ) {
    return _wire_create_scan_progress_stream(
      port_,
    );
  }

  late final _wire_create_scan_progress_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_create_scan_progress_stream');
  late final _wire_create_scan_progress_stream =
      _wire_create_scan_progress_streamPtr.asFunction<void Function(int)>();

  void wire_create_amount_stream(
    int port_,
  ) {
    return _wire_create_amount_stream(
      port_,
    );
  }

  late final _wire_create_amount_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_create_amount_stream');
  late final _wire_create_amount_stream =
      _wire_create_amount_streamPtr.asFunction<void Function(int)>();

  void wire_create_nakamoto_run_stream(
    int port_,
  ) {
    return _wire_create_nakamoto_run_stream(
      port_,
    );
  }

  late final _wire_create_nakamoto_run_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_create_nakamoto_run_stream');
  late final _wire_create_nakamoto_run_stream =
      _wire_create_nakamoto_run_streamPtr.asFunction<void Function(int)>();

  void wire_wallet_exists(
    int port_,
    ffi.Pointer<wire_uint_8_list> label,
    ffi.Pointer<wire_uint_8_list> files_dir,
  ) {
    return _wire_wallet_exists(
      port_,
      label,
      files_dir,
    );
  }

  late final _wire_wallet_existsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_wallet_exists');
  late final _wire_wallet_exists = _wire_wallet_existsPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_setup_nakamoto(
    int port_,
    ffi.Pointer<wire_uint_8_list> network,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_setup_nakamoto(
      port_,
      network,
      path,
    );
  }

  late final _wire_setup_nakamotoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_setup_nakamoto');
  late final _wire_setup_nakamoto = _wire_setup_nakamotoPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_clean_nakamoto(
    int port_,
  ) {
    return _wire_clean_nakamoto(
      port_,
    );
  }

  late final _wire_clean_nakamotoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_clean_nakamoto');
  late final _wire_clean_nakamoto =
      _wire_clean_nakamotoPtr.asFunction<void Function(int)>();

  void wire_setup(
    int port_,
    ffi.Pointer<wire_uint_8_list> label,
    ffi.Pointer<wire_uint_8_list> files_dir,
    ffi.Pointer<wire_WalletType> wallet_type,
    int birthday,
    bool is_testnet,
  ) {
    return _wire_setup(
      port_,
      label,
      files_dir,
      wallet_type,
      birthday,
      is_testnet,
    );
  }

  late final _wire_setupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_WalletType>,
              ffi.Uint32,
              ffi.Bool)>>('wire_setup');
  late final _wire_setup = _wire_setupPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_WalletType>,
          int,
          bool)>();

  void wire_change_birthday(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_uint_8_list> label,
    int birthday,
  ) {
    return _wire_change_birthday(
      port_,
      path,
      label,
      birthday,
    );
  }

  late final _wire_change_birthdayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32)>>('wire_change_birthday');
  late final _wire_change_birthday = _wire_change_birthdayPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_reset_wallet(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_uint_8_list> label,
  ) {
    return _wire_reset_wallet(
      port_,
      path,
      label,
    );
  }

  late final _wire_reset_walletPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_reset_wallet');
  late final _wire_reset_wallet = _wire_reset_walletPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_remove_wallet(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_uint_8_list> label,
  ) {
    return _wire_remove_wallet(
      port_,
      path,
      label,
    );
  }

  late final _wire_remove_walletPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_remove_wallet');
  late final _wire_remove_wallet = _wire_remove_walletPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_sync_blockchain(
    int port_,
  ) {
    return _wire_sync_blockchain(
      port_,
    );
  }

  late final _wire_sync_blockchainPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_sync_blockchain');
  late final _wire_sync_blockchain =
      _wire_sync_blockchainPtr.asFunction<void Function(int)>();

  void wire_scan_to_tip(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_uint_8_list> label,
  ) {
    return _wire_scan_to_tip(
      port_,
      path,
      label,
    );
  }

  late final _wire_scan_to_tipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_scan_to_tip');
  late final _wire_scan_to_tip = _wire_scan_to_tipPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_wallet_info(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_uint_8_list> label,
  ) {
    return _wire_get_wallet_info(
      port_,
      path,
      label,
    );
  }

  late final _wire_get_wallet_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_wallet_info');
  late final _wire_get_wallet_info = _wire_get_wallet_infoPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_receiving_address(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_uint_8_list> label,
  ) {
    return _wire_get_receiving_address(
      port_,
      path,
      label,
    );
  }

  late final _wire_get_receiving_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_receiving_address');
  late final _wire_get_receiving_address =
      _wire_get_receiving_addressPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_spendable_outputs(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_uint_8_list> label,
  ) {
    return _wire_get_spendable_outputs(
      port_,
      path,
      label,
    );
  }

  late final _wire_get_spendable_outputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_spendable_outputs');
  late final _wire_get_spendable_outputs =
      _wire_get_spendable_outputsPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_outputs(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_uint_8_list> label,
  ) {
    return _wire_get_outputs(
      port_,
      path,
      label,
    );
  }

  late final _wire_get_outputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_outputs');
  late final _wire_get_outputs = _wire_get_outputsPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_new_psbt(
    int port_,
    ffi.Pointer<wire_uint_8_list> label,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_list_owned_output> inputs,
    ffi.Pointer<wire_list_recipient> recipients,
  ) {
    return _wire_create_new_psbt(
      port_,
      label,
      path,
      inputs,
      recipients,
    );
  }

  late final _wire_create_new_psbtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_list_owned_output>,
              ffi.Pointer<wire_list_recipient>)>>('wire_create_new_psbt');
  late final _wire_create_new_psbt = _wire_create_new_psbtPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_list_owned_output>,
          ffi.Pointer<wire_list_recipient>)>();

  void wire_add_fee_for_fee_rate(
    int port_,
    ffi.Pointer<wire_uint_8_list> psbt,
    int fee_rate,
    ffi.Pointer<wire_uint_8_list> payer,
  ) {
    return _wire_add_fee_for_fee_rate(
      port_,
      psbt,
      fee_rate,
      payer,
    );
  }

  late final _wire_add_fee_for_fee_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_add_fee_for_fee_rate');
  late final _wire_add_fee_for_fee_rate =
      _wire_add_fee_for_fee_ratePtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>, int,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_fill_sp_outputs(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_uint_8_list> label,
    ffi.Pointer<wire_uint_8_list> psbt,
  ) {
    return _wire_fill_sp_outputs(
      port_,
      path,
      label,
      psbt,
    );
  }

  late final _wire_fill_sp_outputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_fill_sp_outputs');
  late final _wire_fill_sp_outputs = _wire_fill_sp_outputsPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_sign_psbt(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_uint_8_list> label,
    ffi.Pointer<wire_uint_8_list> psbt,
    bool finalize,
  ) {
    return _wire_sign_psbt(
      port_,
      path,
      label,
      psbt,
      finalize,
    );
  }

  late final _wire_sign_psbtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_sign_psbt');
  late final _wire_sign_psbt = _wire_sign_psbtPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          bool)>();

  void wire_extract_tx_from_psbt(
    int port_,
    ffi.Pointer<wire_uint_8_list> psbt,
  ) {
    return _wire_extract_tx_from_psbt(
      port_,
      psbt,
    );
  }

  late final _wire_extract_tx_from_psbtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_extract_tx_from_psbt');
  late final _wire_extract_tx_from_psbt = _wire_extract_tx_from_psbtPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_broadcast_tx(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_broadcast_tx(
      port_,
      tx,
    );
  }

  late final _wire_broadcast_txPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_broadcast_tx');
  late final _wire_broadcast_tx = _wire_broadcast_txPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_mark_transaction_inputs_as_spent(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_uint_8_list> label,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_mark_transaction_inputs_as_spent(
      port_,
      path,
      label,
      tx,
    );
  }

  late final _wire_mark_transaction_inputs_as_spentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_mark_transaction_inputs_as_spent');
  late final _wire_mark_transaction_inputs_as_spent =
      _wire_mark_transaction_inputs_as_spentPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_show_mnemonic(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_uint_8_list> label,
  ) {
    return _wire_show_mnemonic(
      port_,
      path,
      label,
    );
  }

  late final _wire_show_mnemonicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_show_mnemonic');
  late final _wire_show_mnemonic = _wire_show_mnemonicPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_WalletType> new_box_autoadd_wallet_type_0() {
    return _new_box_autoadd_wallet_type_0();
  }

  late final _new_box_autoadd_wallet_type_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_WalletType> Function()>>(
          'new_box_autoadd_wallet_type_0');
  late final _new_box_autoadd_wallet_type_0 = _new_box_autoadd_wallet_type_0Ptr
      .asFunction<ffi.Pointer<wire_WalletType> Function()>();

  ffi.Pointer<wire_list_owned_output> new_list_owned_output_0(
    int len,
  ) {
    return _new_list_owned_output_0(
      len,
    );
  }

  late final _new_list_owned_output_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_owned_output> Function(
              ffi.Int32)>>('new_list_owned_output_0');
  late final _new_list_owned_output_0 = _new_list_owned_output_0Ptr
      .asFunction<ffi.Pointer<wire_list_owned_output> Function(int)>();

  ffi.Pointer<wire_list_recipient> new_list_recipient_0(
    int len,
  ) {
    return _new_list_recipient_0(
      len,
    );
  }

  late final _new_list_recipient_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_recipient> Function(
              ffi.Int32)>>('new_list_recipient_0');
  late final _new_list_recipient_0 = _new_list_recipient_0Ptr
      .asFunction<ffi.Pointer<wire_list_recipient> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  ffi.Pointer<OutputSpendStatusKind> inflate_OutputSpendStatus_Spent() {
    return _inflate_OutputSpendStatus_Spent();
  }

  late final _inflate_OutputSpendStatus_SpentPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<OutputSpendStatusKind> Function()>>(
      'inflate_OutputSpendStatus_Spent');
  late final _inflate_OutputSpendStatus_Spent =
      _inflate_OutputSpendStatus_SpentPtr
          .asFunction<ffi.Pointer<OutputSpendStatusKind> Function()>();

  ffi.Pointer<OutputSpendStatusKind> inflate_OutputSpendStatus_Mined() {
    return _inflate_OutputSpendStatus_Mined();
  }

  late final _inflate_OutputSpendStatus_MinedPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<OutputSpendStatusKind> Function()>>(
      'inflate_OutputSpendStatus_Mined');
  late final _inflate_OutputSpendStatus_Mined =
      _inflate_OutputSpendStatus_MinedPtr
          .asFunction<ffi.Pointer<OutputSpendStatusKind> Function()>();

  ffi.Pointer<WalletTypeKind> inflate_WalletType_Mnemonic() {
    return _inflate_WalletType_Mnemonic();
  }

  late final _inflate_WalletType_MnemonicPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<WalletTypeKind> Function()>>(
          'inflate_WalletType_Mnemonic');
  late final _inflate_WalletType_Mnemonic = _inflate_WalletType_MnemonicPtr
      .asFunction<ffi.Pointer<WalletTypeKind> Function()>();

  ffi.Pointer<WalletTypeKind> inflate_WalletType_PrivateKeys() {
    return _inflate_WalletType_PrivateKeys();
  }

  late final _inflate_WalletType_PrivateKeysPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<WalletTypeKind> Function()>>(
          'inflate_WalletType_PrivateKeys');
  late final _inflate_WalletType_PrivateKeys =
      _inflate_WalletType_PrivateKeysPtr
          .asFunction<ffi.Pointer<WalletTypeKind> Function()>();

  ffi.Pointer<WalletTypeKind> inflate_WalletType_ReadOnly() {
    return _inflate_WalletType_ReadOnly();
  }

  late final _inflate_WalletType_ReadOnlyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<WalletTypeKind> Function()>>(
          'inflate_WalletType_ReadOnly');
  late final _inflate_WalletType_ReadOnly = _inflate_WalletType_ReadOnlyPtr
      .asFunction<ffi.Pointer<WalletTypeKind> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_WalletType_New extends ffi.Opaque {}

final class wire_WalletType_Mnemonic extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class wire_WalletType_PrivateKeys extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;

  external ffi.Pointer<wire_uint_8_list> field1;
}

final class wire_WalletType_ReadOnly extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;

  external ffi.Pointer<wire_uint_8_list> field1;
}

final class WalletTypeKind extends ffi.Union {
  external ffi.Pointer<wire_WalletType_New> New;

  external ffi.Pointer<wire_WalletType_Mnemonic> Mnemonic;

  external ffi.Pointer<wire_WalletType_PrivateKeys> PrivateKeys;

  external ffi.Pointer<wire_WalletType_ReadOnly> ReadOnly;
}

final class wire_WalletType extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<WalletTypeKind> kind;
}

final class wire_OutputSpendStatus_Unspent extends ffi.Opaque {}

final class wire_OutputSpendStatus_Spent extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class wire_OutputSpendStatus_Mined extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class OutputSpendStatusKind extends ffi.Union {
  external ffi.Pointer<wire_OutputSpendStatus_Unspent> Unspent;

  external ffi.Pointer<wire_OutputSpendStatus_Spent> Spent;

  external ffi.Pointer<wire_OutputSpendStatus_Mined> Mined;
}

final class wire_OutputSpendStatus extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<OutputSpendStatusKind> kind;
}

final class wire_OwnedOutput extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> txoutpoint;

  @ffi.Uint32()
  external int blockheight;

  external ffi.Pointer<wire_uint_8_list> tweak;

  @ffi.Uint64()
  external int amount;

  external ffi.Pointer<wire_uint_8_list> script;

  external ffi.Pointer<wire_uint_8_list> label;

  external wire_OutputSpendStatus spend_status;
}

final class wire_list_owned_output extends ffi.Struct {
  external ffi.Pointer<wire_OwnedOutput> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_Recipient extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> address;

  @ffi.Uint64()
  external int amount;

  @ffi.Uint32()
  external int nb_outputs;
}

final class wire_list_recipient extends ffi.Struct {
  external ffi.Pointer<wire_Recipient> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;

const int PSBT_SP_SUBTYPE = 0;

const int DUST_THRESHOLD = 10000;
