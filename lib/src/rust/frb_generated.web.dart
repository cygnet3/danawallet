// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.36.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

// Static analysis wrongly picks the IO variant, thus ignore this
// ignore_for_file: argument_type_not_assignable

import 'api/simple.dart';
import 'constants.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'logger.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_web.dart';
import 'stream.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  RustStreamSink<LogEntry> dco_decode_StreamSink_log_entry_Sse(dynamic raw);

  @protected
  RustStreamSink<ScanProgress> dco_decode_StreamSink_scan_progress_Sse(
      dynamic raw);

  @protected
  RustStreamSink<SyncStatus> dco_decode_StreamSink_sync_status_Sse(dynamic raw);

  @protected
  RustStreamSink<BigInt> dco_decode_StreamSink_u_64_Sse(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  WalletType dco_decode_box_autoadd_wallet_type(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw);

  @protected
  List<OwnedOutput> dco_decode_list_owned_output(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<Recipient> dco_decode_list_recipient(dynamic raw);

  @protected
  LogEntry dco_decode_log_entry(dynamic raw);

  @protected
  LogLevel dco_decode_log_level(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  OutputSpendStatus dco_decode_output_spend_status(dynamic raw);

  @protected
  OwnedOutput dco_decode_owned_output(dynamic raw);

  @protected
  Recipient dco_decode_recipient(dynamic raw);

  @protected
  ScanProgress dco_decode_scan_progress(dynamic raw);

  @protected
  SyncStatus dco_decode_sync_status(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  BigInt dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  WalletStatus dco_decode_wallet_status(dynamic raw);

  @protected
  WalletType dco_decode_wallet_type(dynamic raw);

  @protected
  RustStreamSink<LogEntry> sse_decode_StreamSink_log_entry_Sse(
      SseDeserializer deserializer);

  @protected
  RustStreamSink<ScanProgress> sse_decode_StreamSink_scan_progress_Sse(
      SseDeserializer deserializer);

  @protected
  RustStreamSink<SyncStatus> sse_decode_StreamSink_sync_status_Sse(
      SseDeserializer deserializer);

  @protected
  RustStreamSink<BigInt> sse_decode_StreamSink_u_64_Sse(
      SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  WalletType sse_decode_box_autoadd_wallet_type(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer);

  @protected
  List<OwnedOutput> sse_decode_list_owned_output(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<Recipient> sse_decode_list_recipient(SseDeserializer deserializer);

  @protected
  LogEntry sse_decode_log_entry(SseDeserializer deserializer);

  @protected
  LogLevel sse_decode_log_level(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  OutputSpendStatus sse_decode_output_spend_status(
      SseDeserializer deserializer);

  @protected
  OwnedOutput sse_decode_owned_output(SseDeserializer deserializer);

  @protected
  Recipient sse_decode_recipient(SseDeserializer deserializer);

  @protected
  ScanProgress sse_decode_scan_progress(SseDeserializer deserializer);

  @protected
  SyncStatus sse_decode_sync_status(SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  WalletStatus sse_decode_wallet_status(SseDeserializer deserializer);

  @protected
  WalletType sse_decode_wallet_type(SseDeserializer deserializer);

  @protected
  void sse_encode_StreamSink_log_entry_Sse(
      RustStreamSink<LogEntry> self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_scan_progress_Sse(
      RustStreamSink<ScanProgress> self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_sync_status_Sse(
      RustStreamSink<SyncStatus> self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_u_64_Sse(
      RustStreamSink<BigInt> self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_wallet_type(
      WalletType self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer);

  @protected
  void sse_encode_list_owned_output(
      List<OwnedOutput> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_recipient(
      List<Recipient> self, SseSerializer serializer);

  @protected
  void sse_encode_log_entry(LogEntry self, SseSerializer serializer);

  @protected
  void sse_encode_log_level(LogLevel self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_output_spend_status(
      OutputSpendStatus self, SseSerializer serializer);

  @protected
  void sse_encode_owned_output(OwnedOutput self, SseSerializer serializer);

  @protected
  void sse_encode_recipient(Recipient self, SseSerializer serializer);

  @protected
  void sse_encode_scan_progress(ScanProgress self, SseSerializer serializer);

  @protected
  void sse_encode_sync_status(SyncStatus self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_wallet_status(WalletStatus self, SseSerializer serializer);

  @protected
  void sse_encode_wallet_type(WalletType self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  RustLibWire.fromExternalLibrary(ExternalLibrary lib);
}

@JS('wasm_bindgen')
external RustLibWasmModule get wasmModule;

@JS()
@anonymous
class RustLibWasmModule implements WasmModule {
  @override
  external Object /* Promise */ call([String? moduleName]);

  @override
  external RustLibWasmModule bind(dynamic thisArg, String moduleName);
}
