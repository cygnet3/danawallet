// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.37.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'logger.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'stream.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.37';

  @override
  int get rustContentHash => -980625945;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_donationwallet',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  String crateApiSimpleAddFeeForFeeRate(
      {required String psbt, required int feeRate, required String payer});

  String crateApiSimpleBroadcastTx({required String tx});

  String crateApiSimpleChangeBirthday(
      {required String encodedWallet, required int birthday});

  Stream<BigInt> crateApiSimpleCreateAmountStream();

  Stream<LogEntry> crateApiSimpleCreateLogStream(
      {required LogLevel level, required bool logDependencies});

  String crateApiSimpleCreateNewPsbt(
      {required String encodedWallet,
      required Map<String, OwnedOutput> inputs,
      required List<Recipient> recipients});

  Stream<ScanProgress> crateApiSimpleCreateScanProgressStream();

  String crateApiSimpleExtractTxFromPsbt({required String psbt});

  String crateApiSimpleFillSpOutputs(
      {required String encodedWallet, required String psbt});

  WalletStatus crateApiSimpleGetWalletInfo({required String encodedWallet});

  Future<void> crateApiSimpleInitApp();

  String crateApiSimpleMarkOutpointsSpent(
      {required String encodedWallet,
      required String spentBy,
      required List<String> spent});

  String crateApiSimpleResetWallet({required String encodedWallet});

  Future<String> crateApiSimpleScanToTip({required String encodedWallet});

  Future<String> crateApiSimpleSetup(
      {required String label,
      String? mnemonic,
      String? scanKey,
      String? spendKey,
      required int birthday,
      required String network});

  String? crateApiSimpleShowMnemonic({required String encodedWallet});

  String crateApiSimpleSignPsbt(
      {required String encodedWallet,
      required String psbt,
      required bool finalize});

  Future<int> crateApiSimpleSyncBlockchain();
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  String crateApiSimpleAddFeeForFeeRate(
      {required String psbt, required int feeRate, required String payer}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(psbt, serializer);
        sse_encode_u_32(feeRate, serializer);
        sse_encode_String(payer, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleAddFeeForFeeRateConstMeta,
      argValues: [psbt, feeRate, payer],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleAddFeeForFeeRateConstMeta =>
      const TaskConstMeta(
        debugName: "add_fee_for_fee_rate",
        argNames: ["psbt", "feeRate", "payer"],
      );

  @override
  String crateApiSimpleBroadcastTx({required String tx}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(tx, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleBroadcastTxConstMeta,
      argValues: [tx],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleBroadcastTxConstMeta => const TaskConstMeta(
        debugName: "broadcast_tx",
        argNames: ["tx"],
      );

  @override
  String crateApiSimpleChangeBirthday(
      {required String encodedWallet, required int birthday}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(encodedWallet, serializer);
        sse_encode_u_32(birthday, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleChangeBirthdayConstMeta,
      argValues: [encodedWallet, birthday],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleChangeBirthdayConstMeta =>
      const TaskConstMeta(
        debugName: "change_birthday",
        argNames: ["encodedWallet", "birthday"],
      );

  @override
  Stream<BigInt> crateApiSimpleCreateAmountStream() {
    final s = RustStreamSink<BigInt>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_u_64_Sse(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleCreateAmountStreamConstMeta,
      argValues: [s],
      apiImpl: this,
    ));
    return s.stream;
  }

  TaskConstMeta get kCrateApiSimpleCreateAmountStreamConstMeta =>
      const TaskConstMeta(
        debugName: "create_amount_stream",
        argNames: ["s"],
      );

  @override
  Stream<LogEntry> crateApiSimpleCreateLogStream(
      {required LogLevel level, required bool logDependencies}) {
    final s = RustStreamSink<LogEntry>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_log_entry_Sse(s, serializer);
        sse_encode_log_level(level, serializer);
        sse_encode_bool(logDependencies, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleCreateLogStreamConstMeta,
      argValues: [s, level, logDependencies],
      apiImpl: this,
    ));
    return s.stream;
  }

  TaskConstMeta get kCrateApiSimpleCreateLogStreamConstMeta =>
      const TaskConstMeta(
        debugName: "create_log_stream",
        argNames: ["s", "level", "logDependencies"],
      );

  @override
  String crateApiSimpleCreateNewPsbt(
      {required String encodedWallet,
      required Map<String, OwnedOutput> inputs,
      required List<Recipient> recipients}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(encodedWallet, serializer);
        sse_encode_Map_String_owned_output(inputs, serializer);
        sse_encode_list_recipient(recipients, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleCreateNewPsbtConstMeta,
      argValues: [encodedWallet, inputs, recipients],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleCreateNewPsbtConstMeta =>
      const TaskConstMeta(
        debugName: "create_new_psbt",
        argNames: ["encodedWallet", "inputs", "recipients"],
      );

  @override
  Stream<ScanProgress> crateApiSimpleCreateScanProgressStream() {
    final s = RustStreamSink<ScanProgress>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_scan_progress_Sse(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleCreateScanProgressStreamConstMeta,
      argValues: [s],
      apiImpl: this,
    ));
    return s.stream;
  }

  TaskConstMeta get kCrateApiSimpleCreateScanProgressStreamConstMeta =>
      const TaskConstMeta(
        debugName: "create_scan_progress_stream",
        argNames: ["s"],
      );

  @override
  String crateApiSimpleExtractTxFromPsbt({required String psbt}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(psbt, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleExtractTxFromPsbtConstMeta,
      argValues: [psbt],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleExtractTxFromPsbtConstMeta =>
      const TaskConstMeta(
        debugName: "extract_tx_from_psbt",
        argNames: ["psbt"],
      );

  @override
  String crateApiSimpleFillSpOutputs(
      {required String encodedWallet, required String psbt}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(encodedWallet, serializer);
        sse_encode_String(psbt, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleFillSpOutputsConstMeta,
      argValues: [encodedWallet, psbt],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleFillSpOutputsConstMeta =>
      const TaskConstMeta(
        debugName: "fill_sp_outputs",
        argNames: ["encodedWallet", "psbt"],
      );

  @override
  WalletStatus crateApiSimpleGetWalletInfo({required String encodedWallet}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(encodedWallet, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_wallet_status,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleGetWalletInfoConstMeta,
      argValues: [encodedWallet],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGetWalletInfoConstMeta =>
      const TaskConstMeta(
        debugName: "get_wallet_info",
        argNames: ["encodedWallet"],
      );

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  String crateApiSimpleMarkOutpointsSpent(
      {required String encodedWallet,
      required String spentBy,
      required List<String> spent}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(encodedWallet, serializer);
        sse_encode_String(spentBy, serializer);
        sse_encode_list_String(spent, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleMarkOutpointsSpentConstMeta,
      argValues: [encodedWallet, spentBy, spent],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleMarkOutpointsSpentConstMeta =>
      const TaskConstMeta(
        debugName: "mark_outpoints_spent",
        argNames: ["encodedWallet", "spentBy", "spent"],
      );

  @override
  String crateApiSimpleResetWallet({required String encodedWallet}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(encodedWallet, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleResetWalletConstMeta,
      argValues: [encodedWallet],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleResetWalletConstMeta => const TaskConstMeta(
        debugName: "reset_wallet",
        argNames: ["encodedWallet"],
      );

  @override
  Future<String> crateApiSimpleScanToTip({required String encodedWallet}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(encodedWallet, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleScanToTipConstMeta,
      argValues: [encodedWallet],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleScanToTipConstMeta => const TaskConstMeta(
        debugName: "scan_to_tip",
        argNames: ["encodedWallet"],
      );

  @override
  Future<String> crateApiSimpleSetup(
      {required String label,
      String? mnemonic,
      String? scanKey,
      String? spendKey,
      required int birthday,
      required String network}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(label, serializer);
        sse_encode_opt_String(mnemonic, serializer);
        sse_encode_opt_String(scanKey, serializer);
        sse_encode_opt_String(spendKey, serializer);
        sse_encode_u_32(birthday, serializer);
        sse_encode_String(network, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSetupConstMeta,
      argValues: [label, mnemonic, scanKey, spendKey, birthday, network],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSetupConstMeta => const TaskConstMeta(
        debugName: "setup",
        argNames: [
          "label",
          "mnemonic",
          "scanKey",
          "spendKey",
          "birthday",
          "network"
        ],
      );

  @override
  String? crateApiSimpleShowMnemonic({required String encodedWallet}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(encodedWallet, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleShowMnemonicConstMeta,
      argValues: [encodedWallet],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleShowMnemonicConstMeta => const TaskConstMeta(
        debugName: "show_mnemonic",
        argNames: ["encodedWallet"],
      );

  @override
  String crateApiSimpleSignPsbt(
      {required String encodedWallet,
      required String psbt,
      required bool finalize}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(encodedWallet, serializer);
        sse_encode_String(psbt, serializer);
        sse_encode_bool(finalize, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSignPsbtConstMeta,
      argValues: [encodedWallet, psbt, finalize],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSignPsbtConstMeta => const TaskConstMeta(
        debugName: "sign_psbt",
        argNames: ["encodedWallet", "psbt", "finalize"],
      );

  @override
  Future<int> crateApiSimpleSyncBlockchain() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSyncBlockchainConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSyncBlockchainConstMeta =>
      const TaskConstMeta(
        debugName: "sync_blockchain",
        argNames: [],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  Map<String, OwnedOutput> dco_decode_Map_String_owned_output(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_owned_output(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  RustStreamSink<LogEntry> dco_decode_StreamSink_log_entry_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<ScanProgress> dco_decode_StreamSink_scan_progress_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<BigInt> dco_decode_StreamSink_u_64_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Amount dco_decode_amount(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Amount(
      field0: dco_decode_u_64(arr[0]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<Recipient> dco_decode_list_recipient(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_recipient).toList();
  }

  @protected
  List<(String, OwnedOutput)> dco_decode_list_record_string_owned_output(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_owned_output)
        .toList();
  }

  @protected
  LogEntry dco_decode_log_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return LogEntry(
      timeMillis: dco_decode_i_64(arr[0]),
      level: dco_decode_String(arr[1]),
      tag: dco_decode_String(arr[2]),
      msg: dco_decode_String(arr[3]),
    );
  }

  @protected
  LogLevel dco_decode_log_level(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LogLevel.values[raw as int];
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  OutputSpendStatus dco_decode_output_spend_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return OutputSpendStatus_Unspent();
      case 1:
        return OutputSpendStatus_Spent(
          dco_decode_String(raw[1]),
        );
      case 2:
        return OutputSpendStatus_Mined(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  OwnedOutput dco_decode_owned_output(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return OwnedOutput(
      blockheight: dco_decode_u_32(arr[0]),
      tweak: dco_decode_String(arr[1]),
      amount: dco_decode_amount(arr[2]),
      script: dco_decode_String(arr[3]),
      label: dco_decode_opt_String(arr[4]),
      spendStatus: dco_decode_output_spend_status(arr[5]),
    );
  }

  @protected
  Recipient dco_decode_recipient(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Recipient(
      address: dco_decode_String(arr[0]),
      amount: dco_decode_amount(arr[1]),
      nbOutputs: dco_decode_u_32(arr[2]),
    );
  }

  @protected
  (String, OwnedOutput) dco_decode_record_string_owned_output(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_owned_output(arr[1]),
    );
  }

  @protected
  ScanProgress dco_decode_scan_progress(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ScanProgress(
      start: dco_decode_u_32(arr[0]),
      current: dco_decode_u_32(arr[1]),
      end: dco_decode_u_32(arr[2]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  WalletStatus dco_decode_wallet_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return WalletStatus(
      address: dco_decode_String(arr[0]),
      balance: dco_decode_u_64(arr[1]),
      birthday: dco_decode_u_32(arr[2]),
      lastScan: dco_decode_u_32(arr[3]),
      outputs: dco_decode_Map_String_owned_output(arr[4]),
    );
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  Map<String, OwnedOutput> sse_decode_Map_String_owned_output(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_owned_output(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  RustStreamSink<LogEntry> sse_decode_StreamSink_log_entry_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<ScanProgress> sse_decode_StreamSink_scan_progress_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<BigInt> sse_decode_StreamSink_u_64_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  Amount sse_decode_amount(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_64(deserializer);
    return Amount(field0: var_field0);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<Recipient> sse_decode_list_recipient(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Recipient>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_recipient(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, OwnedOutput)> sse_decode_list_record_string_owned_output(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, OwnedOutput)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_owned_output(deserializer));
    }
    return ans_;
  }

  @protected
  LogEntry sse_decode_log_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_timeMillis = sse_decode_i_64(deserializer);
    var var_level = sse_decode_String(deserializer);
    var var_tag = sse_decode_String(deserializer);
    var var_msg = sse_decode_String(deserializer);
    return LogEntry(
        timeMillis: var_timeMillis,
        level: var_level,
        tag: var_tag,
        msg: var_msg);
  }

  @protected
  LogLevel sse_decode_log_level(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return LogLevel.values[inner];
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  OutputSpendStatus sse_decode_output_spend_status(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return OutputSpendStatus_Unspent();
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return OutputSpendStatus_Spent(var_field0);
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        return OutputSpendStatus_Mined(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  OwnedOutput sse_decode_owned_output(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_blockheight = sse_decode_u_32(deserializer);
    var var_tweak = sse_decode_String(deserializer);
    var var_amount = sse_decode_amount(deserializer);
    var var_script = sse_decode_String(deserializer);
    var var_label = sse_decode_opt_String(deserializer);
    var var_spendStatus = sse_decode_output_spend_status(deserializer);
    return OwnedOutput(
        blockheight: var_blockheight,
        tweak: var_tweak,
        amount: var_amount,
        script: var_script,
        label: var_label,
        spendStatus: var_spendStatus);
  }

  @protected
  Recipient sse_decode_recipient(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_address = sse_decode_String(deserializer);
    var var_amount = sse_decode_amount(deserializer);
    var var_nbOutputs = sse_decode_u_32(deserializer);
    return Recipient(
        address: var_address, amount: var_amount, nbOutputs: var_nbOutputs);
  }

  @protected
  (String, OwnedOutput) sse_decode_record_string_owned_output(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_owned_output(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  ScanProgress sse_decode_scan_progress(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_start = sse_decode_u_32(deserializer);
    var var_current = sse_decode_u_32(deserializer);
    var var_end = sse_decode_u_32(deserializer);
    return ScanProgress(start: var_start, current: var_current, end: var_end);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  WalletStatus sse_decode_wallet_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_address = sse_decode_String(deserializer);
    var var_balance = sse_decode_u_64(deserializer);
    var var_birthday = sse_decode_u_32(deserializer);
    var var_lastScan = sse_decode_u_32(deserializer);
    var var_outputs = sse_decode_Map_String_owned_output(deserializer);
    return WalletStatus(
        address: var_address,
        balance: var_balance,
        birthday: var_birthday,
        lastScan: var_lastScan,
        outputs: var_outputs);
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_Map_String_owned_output(
      Map<String, OwnedOutput> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_owned_output(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_StreamSink_log_entry_Sse(
      RustStreamSink<LogEntry> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_log_entry,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_scan_progress_Sse(
      RustStreamSink<ScanProgress> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_scan_progress,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_u_64_Sse(
      RustStreamSink<BigInt> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_u_64, decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_amount(Amount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.field0, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_recipient(
      List<Recipient> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_recipient(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_owned_output(
      List<(String, OwnedOutput)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_owned_output(item, serializer);
    }
  }

  @protected
  void sse_encode_log_entry(LogEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.timeMillis, serializer);
    sse_encode_String(self.level, serializer);
    sse_encode_String(self.tag, serializer);
    sse_encode_String(self.msg, serializer);
  }

  @protected
  void sse_encode_log_level(LogLevel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_output_spend_status(
      OutputSpendStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case OutputSpendStatus_Unspent():
        sse_encode_i_32(0, serializer);
      case OutputSpendStatus_Spent(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      case OutputSpendStatus_Mined(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_owned_output(OwnedOutput self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.blockheight, serializer);
    sse_encode_String(self.tweak, serializer);
    sse_encode_amount(self.amount, serializer);
    sse_encode_String(self.script, serializer);
    sse_encode_opt_String(self.label, serializer);
    sse_encode_output_spend_status(self.spendStatus, serializer);
  }

  @protected
  void sse_encode_recipient(Recipient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.address, serializer);
    sse_encode_amount(self.amount, serializer);
    sse_encode_u_32(self.nbOutputs, serializer);
  }

  @protected
  void sse_encode_record_string_owned_output(
      (String, OwnedOutput) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_owned_output(self.$2, serializer);
  }

  @protected
  void sse_encode_scan_progress(ScanProgress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.start, serializer);
    sse_encode_u_32(self.current, serializer);
    sse_encode_u_32(self.end, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_wallet_status(WalletStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.address, serializer);
    sse_encode_u_64(self.balance, serializer);
    sse_encode_u_32(self.birthday, serializer);
    sse_encode_u_32(self.lastScan, serializer);
    sse_encode_Map_String_owned_output(self.outputs, serializer);
  }
}
