// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/chain.dart';
import 'api/history.dart';
import 'api/outputs.dart';
import 'api/stream.dart';
import 'api/structs.dart';
import 'api/wallet.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'logger.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'stream.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.3.0';

  @override
  int get rustContentHash => -1002331641;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_danawallet',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<int> crateApiChainGetChainHeight({required String blindbitUrl});

  void crateApiHistoryTxHistoryAddOutgoingTxToHistory(
      {required TxHistory that,
      required String txid,
      required List<String> spentOutpoints,
      required List<ApiRecipient> recipients,
      required ApiAmount change});

  TxHistory crateApiHistoryTxHistoryDecode({required String encodedHistory});

  TxHistory crateApiHistoryTxHistoryEmpty();

  String crateApiHistoryTxHistoryEncode({required TxHistory that});

  BigInt crateApiHistoryTxHistoryGetUnconfirmedChange(
      {required TxHistory that});

  void crateApiHistoryTxHistoryProcessStateUpdate(
      {required TxHistory that, required StateUpdate update});

  void crateApiHistoryTxHistoryResetToHeight(
      {required TxHistory that, required int height});

  List<ApiRecordedTransaction> crateApiHistoryTxHistoryToApiTransactions(
      {required TxHistory that});

  OwnedOutputs crateApiOutputsOwnedOutputsDecode(
      {required String encodedOutputs});

  OwnedOutputs crateApiOutputsOwnedOutputsEmpty();

  String crateApiOutputsOwnedOutputsEncode({required OwnedOutputs that});

  OwnedOutPoints crateApiOutputsOwnedOutputsGetUnconfirmedSpentOutpoints(
      {required OwnedOutputs that});

  BigInt crateApiOutputsOwnedOutputsGetUnspentAmount(
      {required OwnedOutputs that});

  Map<String, ApiOwnedOutput> crateApiOutputsOwnedOutputsGetUnspentOutputs(
      {required OwnedOutputs that});

  void crateApiOutputsOwnedOutputsMarkOutpointsSpent(
      {required OwnedOutputs that,
      required String spentBy,
      required List<String> spent});

  void crateApiOutputsOwnedOutputsProcessStateUpdate(
      {required OwnedOutputs that, required StateUpdate update});

  void crateApiOutputsOwnedOutputsResetToHeight(
      {required OwnedOutputs that, required int height});

  Future<void> crateApiSimpleInitApp();

  Stream<LogEntry> crateApiStreamCreateLogStream(
      {required LogLevel level, required bool logDependencies});

  Stream<ScanProgress> crateApiStreamCreateScanProgressStream();

  Stream<StateUpdate> crateApiStreamCreateScanResultStream();

  String crateApiStructsApiAmountDisplayBtc({required ApiAmount that});

  String crateApiStructsApiAmountDisplaySats({required ApiAmount that});

  BigInt crateApiStructsApiAmountToInt({required ApiAmount that});

  String crateApiStructsApiRecordedTransactionIncomingToString(
      {required ApiRecordedTransactionIncoming that});

  String crateApiStructsApiRecordedTransactionOutgoingToString(
      {required ApiRecordedTransactionOutgoing that});

  ApiAmount crateApiStructsApiSilentPaymentUnsignedTransactionGetChangeAmount(
      {required ApiSilentPaymentUnsignedTransaction that,
      required String changeAddress});

  ApiAmount crateApiStructsApiSilentPaymentUnsignedTransactionGetFeeAmount(
      {required ApiSilentPaymentUnsignedTransaction that});

  List<ApiRecipient>
      crateApiStructsApiSilentPaymentUnsignedTransactionGetRecipients(
          {required ApiSilentPaymentUnsignedTransaction that,
          required String changeAddress});

  ApiAmount crateApiStructsApiSilentPaymentUnsignedTransactionGetSendAmount(
      {required ApiSilentPaymentUnsignedTransaction that,
      required String changeAddress});

  Future<String> crateApiWalletSpWalletBroadcastTx(
      {required String tx, required String network});

  ApiSilentPaymentUnsignedTransaction
      crateApiWalletSpWalletCreateDrainTransaction(
          {required SpWallet that,
          required Map<String, ApiOwnedOutput> apiOutputs,
          required String wipeAddress,
          required double feerate,
          required String network});

  ApiSilentPaymentUnsignedTransaction
      crateApiWalletSpWalletCreateNewTransaction(
          {required SpWallet that,
          required Map<String, ApiOwnedOutput> apiOutputs,
          required List<ApiRecipient> apiRecipients,
          required double feerate,
          required String network});

  SpWallet crateApiWalletSpWalletDecode({required String encodedWallet});

  String crateApiWalletSpWalletEncode({required SpWallet that});

  ApiSilentPaymentUnsignedTransaction crateApiWalletSpWalletFinalizeTransaction(
      {required ApiSilentPaymentUnsignedTransaction unsignedTransaction});

  int crateApiWalletSpWalletGetBirthday({required SpWallet that});

  String crateApiWalletSpWalletGetChangeAddress({required SpWallet that});

  String crateApiWalletSpWalletGetNetwork({required SpWallet that});

  String crateApiWalletSpWalletGetReceivingAddress({required SpWallet that});

  int? crateApiWalletSpWalletGetWalletLastScan({required SpWallet that});

  OwnedOutputs? crateApiWalletSpWalletGetWalletOwnedOutputs(
      {required SpWallet that});

  TxHistory? crateApiWalletSpWalletGetWalletTxHistory({required SpWallet that});

  void crateApiWalletSpWalletInterruptScanning();

  Future<void> crateApiWalletSpWalletScanToTip(
      {required SpWallet that,
      required String blindbitUrl,
      required int lastScan,
      required BigInt dustLimit,
      required OwnedOutPoints ownedOutpoints});

  ApiSetupResult crateApiWalletSpWalletSetupWallet(
      {required ApiSetupWalletArgs setupArgs});

  String crateApiWalletSpWalletSignTransaction(
      {required SpWallet that,
      required ApiSilentPaymentUnsignedTransaction unsignedTransaction});

  int crateStreamStateUpdateGetHeight({required StateUpdate that});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OwnedOutPoints;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OwnedOutPoints;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OwnedOutPointsPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OwnedOutputs;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OwnedOutputs;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OwnedOutputsPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SpWallet;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SpWallet;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SpWalletPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StateUpdate;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StateUpdate;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_StateUpdatePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TxHistory;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TxHistory;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_TxHistoryPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<int> crateApiChainGetChainHeight({required String blindbitUrl}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(blindbitUrl, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiChainGetChainHeightConstMeta,
      argValues: [blindbitUrl],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiChainGetChainHeightConstMeta =>
      const TaskConstMeta(
        debugName: "get_chain_height",
        argNames: ["blindbitUrl"],
      );

  @override
  void crateApiHistoryTxHistoryAddOutgoingTxToHistory(
      {required TxHistory that,
      required String txid,
      required List<String> spentOutpoints,
      required List<ApiRecipient> recipients,
      required ApiAmount change}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
            that, serializer);
        sse_encode_String(txid, serializer);
        sse_encode_list_String(spentOutpoints, serializer);
        sse_encode_list_api_recipient(recipients, serializer);
        sse_encode_box_autoadd_api_amount(change, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiHistoryTxHistoryAddOutgoingTxToHistoryConstMeta,
      argValues: [that, txid, spentOutpoints, recipients, change],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiHistoryTxHistoryAddOutgoingTxToHistoryConstMeta =>
      const TaskConstMeta(
        debugName: "TxHistory_add_outgoing_tx_to_history",
        argNames: ["that", "txid", "spentOutpoints", "recipients", "change"],
      );

  @override
  TxHistory crateApiHistoryTxHistoryDecode({required String encodedHistory}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(encodedHistory, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiHistoryTxHistoryDecodeConstMeta,
      argValues: [encodedHistory],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiHistoryTxHistoryDecodeConstMeta =>
      const TaskConstMeta(
        debugName: "TxHistory_decode",
        argNames: ["encodedHistory"],
      );

  @override
  TxHistory crateApiHistoryTxHistoryEmpty() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiHistoryTxHistoryEmptyConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiHistoryTxHistoryEmptyConstMeta =>
      const TaskConstMeta(
        debugName: "TxHistory_empty",
        argNames: [],
      );

  @override
  String crateApiHistoryTxHistoryEncode({required TxHistory that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiHistoryTxHistoryEncodeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiHistoryTxHistoryEncodeConstMeta =>
      const TaskConstMeta(
        debugName: "TxHistory_encode",
        argNames: ["that"],
      );

  @override
  BigInt crateApiHistoryTxHistoryGetUnconfirmedChange(
      {required TxHistory that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiHistoryTxHistoryGetUnconfirmedChangeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiHistoryTxHistoryGetUnconfirmedChangeConstMeta =>
      const TaskConstMeta(
        debugName: "TxHistory_get_unconfirmed_change",
        argNames: ["that"],
      );

  @override
  void crateApiHistoryTxHistoryProcessStateUpdate(
      {required TxHistory that, required StateUpdate update}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStateUpdate(
            update, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiHistoryTxHistoryProcessStateUpdateConstMeta,
      argValues: [that, update],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiHistoryTxHistoryProcessStateUpdateConstMeta =>
      const TaskConstMeta(
        debugName: "TxHistory_process_state_update",
        argNames: ["that", "update"],
      );

  @override
  void crateApiHistoryTxHistoryResetToHeight(
      {required TxHistory that, required int height}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
            that, serializer);
        sse_encode_u_32(height, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiHistoryTxHistoryResetToHeightConstMeta,
      argValues: [that, height],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiHistoryTxHistoryResetToHeightConstMeta =>
      const TaskConstMeta(
        debugName: "TxHistory_reset_to_height",
        argNames: ["that", "height"],
      );

  @override
  List<ApiRecordedTransaction> crateApiHistoryTxHistoryToApiTransactions(
      {required TxHistory that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_recorded_transaction,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiHistoryTxHistoryToApiTransactionsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiHistoryTxHistoryToApiTransactionsConstMeta =>
      const TaskConstMeta(
        debugName: "TxHistory_to_api_transactions",
        argNames: ["that"],
      );

  @override
  OwnedOutputs crateApiOutputsOwnedOutputsDecode(
      {required String encodedOutputs}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(encodedOutputs, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOutputsOwnedOutputsDecodeConstMeta,
      argValues: [encodedOutputs],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOutputsOwnedOutputsDecodeConstMeta =>
      const TaskConstMeta(
        debugName: "OwnedOutputs_decode",
        argNames: ["encodedOutputs"],
      );

  @override
  OwnedOutputs crateApiOutputsOwnedOutputsEmpty() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOutputsOwnedOutputsEmptyConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOutputsOwnedOutputsEmptyConstMeta =>
      const TaskConstMeta(
        debugName: "OwnedOutputs_empty",
        argNames: [],
      );

  @override
  String crateApiOutputsOwnedOutputsEncode({required OwnedOutputs that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOutputsOwnedOutputsEncodeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOutputsOwnedOutputsEncodeConstMeta =>
      const TaskConstMeta(
        debugName: "OwnedOutputs_encode",
        argNames: ["that"],
      );

  @override
  OwnedOutPoints crateApiOutputsOwnedOutputsGetUnconfirmedSpentOutpoints(
      {required OwnedOutputs that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutPoints,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiOutputsOwnedOutputsGetUnconfirmedSpentOutpointsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiOutputsOwnedOutputsGetUnconfirmedSpentOutpointsConstMeta =>
          const TaskConstMeta(
            debugName: "OwnedOutputs_get_unconfirmed_spent_outpoints",
            argNames: ["that"],
          );

  @override
  BigInt crateApiOutputsOwnedOutputsGetUnspentAmount(
      {required OwnedOutputs that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOutputsOwnedOutputsGetUnspentAmountConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOutputsOwnedOutputsGetUnspentAmountConstMeta =>
      const TaskConstMeta(
        debugName: "OwnedOutputs_get_unspent_amount",
        argNames: ["that"],
      );

  @override
  Map<String, ApiOwnedOutput> crateApiOutputsOwnedOutputsGetUnspentOutputs(
      {required OwnedOutputs that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_api_owned_output,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOutputsOwnedOutputsGetUnspentOutputsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOutputsOwnedOutputsGetUnspentOutputsConstMeta =>
      const TaskConstMeta(
        debugName: "OwnedOutputs_get_unspent_outputs",
        argNames: ["that"],
      );

  @override
  void crateApiOutputsOwnedOutputsMarkOutpointsSpent(
      {required OwnedOutputs that,
      required String spentBy,
      required List<String> spent}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
            that, serializer);
        sse_encode_String(spentBy, serializer);
        sse_encode_list_String(spent, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiOutputsOwnedOutputsMarkOutpointsSpentConstMeta,
      argValues: [that, spentBy, spent],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOutputsOwnedOutputsMarkOutpointsSpentConstMeta =>
      const TaskConstMeta(
        debugName: "OwnedOutputs_mark_outpoints_spent",
        argNames: ["that", "spentBy", "spent"],
      );

  @override
  void crateApiOutputsOwnedOutputsProcessStateUpdate(
      {required OwnedOutputs that, required StateUpdate update}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStateUpdate(
            update, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiOutputsOwnedOutputsProcessStateUpdateConstMeta,
      argValues: [that, update],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOutputsOwnedOutputsProcessStateUpdateConstMeta =>
      const TaskConstMeta(
        debugName: "OwnedOutputs_process_state_update",
        argNames: ["that", "update"],
      );

  @override
  void crateApiOutputsOwnedOutputsResetToHeight(
      {required OwnedOutputs that, required int height}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
            that, serializer);
        sse_encode_u_32(height, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiOutputsOwnedOutputsResetToHeightConstMeta,
      argValues: [that, height],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOutputsOwnedOutputsResetToHeightConstMeta =>
      const TaskConstMeta(
        debugName: "OwnedOutputs_reset_to_height",
        argNames: ["that", "height"],
      );

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Stream<LogEntry> crateApiStreamCreateLogStream(
      {required LogLevel level, required bool logDependencies}) {
    final s = RustStreamSink<LogEntry>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_log_entry_Sse(s, serializer);
        sse_encode_log_level(level, serializer);
        sse_encode_bool(logDependencies, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStreamCreateLogStreamConstMeta,
      argValues: [s, level, logDependencies],
      apiImpl: this,
    ));
    return s.stream;
  }

  TaskConstMeta get kCrateApiStreamCreateLogStreamConstMeta =>
      const TaskConstMeta(
        debugName: "create_log_stream",
        argNames: ["s", "level", "logDependencies"],
      );

  @override
  Stream<ScanProgress> crateApiStreamCreateScanProgressStream() {
    final s = RustStreamSink<ScanProgress>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_scan_progress_Sse(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStreamCreateScanProgressStreamConstMeta,
      argValues: [s],
      apiImpl: this,
    ));
    return s.stream;
  }

  TaskConstMeta get kCrateApiStreamCreateScanProgressStreamConstMeta =>
      const TaskConstMeta(
        debugName: "create_scan_progress_stream",
        argNames: ["s"],
      );

  @override
  Stream<StateUpdate> crateApiStreamCreateScanResultStream() {
    final s = RustStreamSink<StateUpdate>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStateUpdate_Sse(
            s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStreamCreateScanResultStreamConstMeta,
      argValues: [s],
      apiImpl: this,
    ));
    return s.stream;
  }

  TaskConstMeta get kCrateApiStreamCreateScanResultStreamConstMeta =>
      const TaskConstMeta(
        debugName: "create_scan_result_stream",
        argNames: ["s"],
      );

  @override
  String crateApiStructsApiAmountDisplayBtc({required ApiAmount that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_api_amount(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructsApiAmountDisplayBtcConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructsApiAmountDisplayBtcConstMeta =>
      const TaskConstMeta(
        debugName: "api_amount_display_btc",
        argNames: ["that"],
      );

  @override
  String crateApiStructsApiAmountDisplaySats({required ApiAmount that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_api_amount(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructsApiAmountDisplaySatsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructsApiAmountDisplaySatsConstMeta =>
      const TaskConstMeta(
        debugName: "api_amount_display_sats",
        argNames: ["that"],
      );

  @override
  BigInt crateApiStructsApiAmountToInt({required ApiAmount that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_api_amount(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructsApiAmountToIntConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructsApiAmountToIntConstMeta =>
      const TaskConstMeta(
        debugName: "api_amount_to_int",
        argNames: ["that"],
      );

  @override
  String crateApiStructsApiRecordedTransactionIncomingToString(
      {required ApiRecordedTransactionIncoming that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_api_recorded_transaction_incoming(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiStructsApiRecordedTransactionIncomingToStringConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiStructsApiRecordedTransactionIncomingToStringConstMeta =>
          const TaskConstMeta(
            debugName: "api_recorded_transaction_incoming_to_string",
            argNames: ["that"],
          );

  @override
  String crateApiStructsApiRecordedTransactionOutgoingToString(
      {required ApiRecordedTransactionOutgoing that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_api_recorded_transaction_outgoing(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiStructsApiRecordedTransactionOutgoingToStringConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiStructsApiRecordedTransactionOutgoingToStringConstMeta =>
          const TaskConstMeta(
            debugName: "api_recorded_transaction_outgoing_to_string",
            argNames: ["that"],
          );

  @override
  ApiAmount crateApiStructsApiSilentPaymentUnsignedTransactionGetChangeAmount(
      {required ApiSilentPaymentUnsignedTransaction that,
      required String changeAddress}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_api_silent_payment_unsigned_transaction(
            that, serializer);
        sse_encode_String(changeAddress, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_amount,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiStructsApiSilentPaymentUnsignedTransactionGetChangeAmountConstMeta,
      argValues: [that, changeAddress],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiStructsApiSilentPaymentUnsignedTransactionGetChangeAmountConstMeta =>
          const TaskConstMeta(
            debugName:
                "api_silent_payment_unsigned_transaction_get_change_amount",
            argNames: ["that", "changeAddress"],
          );

  @override
  ApiAmount crateApiStructsApiSilentPaymentUnsignedTransactionGetFeeAmount(
      {required ApiSilentPaymentUnsignedTransaction that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_api_silent_payment_unsigned_transaction(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_amount,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiStructsApiSilentPaymentUnsignedTransactionGetFeeAmountConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiStructsApiSilentPaymentUnsignedTransactionGetFeeAmountConstMeta =>
          const TaskConstMeta(
            debugName: "api_silent_payment_unsigned_transaction_get_fee_amount",
            argNames: ["that"],
          );

  @override
  List<ApiRecipient>
      crateApiStructsApiSilentPaymentUnsignedTransactionGetRecipients(
          {required ApiSilentPaymentUnsignedTransaction that,
          required String changeAddress}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_api_silent_payment_unsigned_transaction(
            that, serializer);
        sse_encode_String(changeAddress, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_recipient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiStructsApiSilentPaymentUnsignedTransactionGetRecipientsConstMeta,
      argValues: [that, changeAddress],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiStructsApiSilentPaymentUnsignedTransactionGetRecipientsConstMeta =>
          const TaskConstMeta(
            debugName: "api_silent_payment_unsigned_transaction_get_recipients",
            argNames: ["that", "changeAddress"],
          );

  @override
  ApiAmount crateApiStructsApiSilentPaymentUnsignedTransactionGetSendAmount(
      {required ApiSilentPaymentUnsignedTransaction that,
      required String changeAddress}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_api_silent_payment_unsigned_transaction(
            that, serializer);
        sse_encode_String(changeAddress, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_amount,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiStructsApiSilentPaymentUnsignedTransactionGetSendAmountConstMeta,
      argValues: [that, changeAddress],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiStructsApiSilentPaymentUnsignedTransactionGetSendAmountConstMeta =>
          const TaskConstMeta(
            debugName:
                "api_silent_payment_unsigned_transaction_get_send_amount",
            argNames: ["that", "changeAddress"],
          );

  @override
  Future<String> crateApiWalletSpWalletBroadcastTx(
      {required String tx, required String network}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(tx, serializer);
        sse_encode_String(network, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletSpWalletBroadcastTxConstMeta,
      argValues: [tx, network],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletSpWalletBroadcastTxConstMeta =>
      const TaskConstMeta(
        debugName: "SpWallet_broadcast_tx",
        argNames: ["tx", "network"],
      );

  @override
  ApiSilentPaymentUnsignedTransaction
      crateApiWalletSpWalletCreateDrainTransaction(
          {required SpWallet that,
          required Map<String, ApiOwnedOutput> apiOutputs,
          required String wipeAddress,
          required double feerate,
          required String network}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
            that, serializer);
        sse_encode_Map_String_api_owned_output(apiOutputs, serializer);
        sse_encode_String(wipeAddress, serializer);
        sse_encode_f_32(feerate, serializer);
        sse_encode_String(network, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 33)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_silent_payment_unsigned_transaction,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletSpWalletCreateDrainTransactionConstMeta,
      argValues: [that, apiOutputs, wipeAddress, feerate, network],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletSpWalletCreateDrainTransactionConstMeta =>
      const TaskConstMeta(
        debugName: "SpWallet_create_drain_transaction",
        argNames: ["that", "apiOutputs", "wipeAddress", "feerate", "network"],
      );

  @override
  ApiSilentPaymentUnsignedTransaction
      crateApiWalletSpWalletCreateNewTransaction(
          {required SpWallet that,
          required Map<String, ApiOwnedOutput> apiOutputs,
          required List<ApiRecipient> apiRecipients,
          required double feerate,
          required String network}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
            that, serializer);
        sse_encode_Map_String_api_owned_output(apiOutputs, serializer);
        sse_encode_list_api_recipient(apiRecipients, serializer);
        sse_encode_f_32(feerate, serializer);
        sse_encode_String(network, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_silent_payment_unsigned_transaction,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletSpWalletCreateNewTransactionConstMeta,
      argValues: [that, apiOutputs, apiRecipients, feerate, network],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletSpWalletCreateNewTransactionConstMeta =>
      const TaskConstMeta(
        debugName: "SpWallet_create_new_transaction",
        argNames: ["that", "apiOutputs", "apiRecipients", "feerate", "network"],
      );

  @override
  SpWallet crateApiWalletSpWalletDecode({required String encodedWallet}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(encodedWallet, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletSpWalletDecodeConstMeta,
      argValues: [encodedWallet],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletSpWalletDecodeConstMeta =>
      const TaskConstMeta(
        debugName: "SpWallet_decode",
        argNames: ["encodedWallet"],
      );

  @override
  String crateApiWalletSpWalletEncode({required SpWallet that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 36)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletSpWalletEncodeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletSpWalletEncodeConstMeta =>
      const TaskConstMeta(
        debugName: "SpWallet_encode",
        argNames: ["that"],
      );

  @override
  ApiSilentPaymentUnsignedTransaction crateApiWalletSpWalletFinalizeTransaction(
      {required ApiSilentPaymentUnsignedTransaction unsignedTransaction}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_api_silent_payment_unsigned_transaction(
            unsignedTransaction, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 37)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_silent_payment_unsigned_transaction,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletSpWalletFinalizeTransactionConstMeta,
      argValues: [unsignedTransaction],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletSpWalletFinalizeTransactionConstMeta =>
      const TaskConstMeta(
        debugName: "SpWallet_finalize_transaction",
        argNames: ["unsignedTransaction"],
      );

  @override
  int crateApiWalletSpWalletGetBirthday({required SpWallet that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 38)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletSpWalletGetBirthdayConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletSpWalletGetBirthdayConstMeta =>
      const TaskConstMeta(
        debugName: "SpWallet_get_birthday",
        argNames: ["that"],
      );

  @override
  String crateApiWalletSpWalletGetChangeAddress({required SpWallet that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 39)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletSpWalletGetChangeAddressConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletSpWalletGetChangeAddressConstMeta =>
      const TaskConstMeta(
        debugName: "SpWallet_get_change_address",
        argNames: ["that"],
      );

  @override
  String crateApiWalletSpWalletGetNetwork({required SpWallet that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 40)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletSpWalletGetNetworkConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletSpWalletGetNetworkConstMeta =>
      const TaskConstMeta(
        debugName: "SpWallet_get_network",
        argNames: ["that"],
      );

  @override
  String crateApiWalletSpWalletGetReceivingAddress({required SpWallet that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 41)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletSpWalletGetReceivingAddressConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletSpWalletGetReceivingAddressConstMeta =>
      const TaskConstMeta(
        debugName: "SpWallet_get_receiving_address",
        argNames: ["that"],
      );

  @override
  int? crateApiWalletSpWalletGetWalletLastScan({required SpWallet that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 42)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletSpWalletGetWalletLastScanConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletSpWalletGetWalletLastScanConstMeta =>
      const TaskConstMeta(
        debugName: "SpWallet_get_wallet_last_scan",
        argNames: ["that"],
      );

  @override
  OwnedOutputs? crateApiWalletSpWalletGetWalletOwnedOutputs(
      {required SpWallet that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 43)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletSpWalletGetWalletOwnedOutputsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletSpWalletGetWalletOwnedOutputsConstMeta =>
      const TaskConstMeta(
        debugName: "SpWallet_get_wallet_owned_outputs",
        argNames: ["that"],
      );

  @override
  TxHistory? crateApiWalletSpWalletGetWalletTxHistory(
      {required SpWallet that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 44)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletSpWalletGetWalletTxHistoryConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletSpWalletGetWalletTxHistoryConstMeta =>
      const TaskConstMeta(
        debugName: "SpWallet_get_wallet_tx_history",
        argNames: ["that"],
      );

  @override
  void crateApiWalletSpWalletInterruptScanning() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 45)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletSpWalletInterruptScanningConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletSpWalletInterruptScanningConstMeta =>
      const TaskConstMeta(
        debugName: "SpWallet_interrupt_scanning",
        argNames: [],
      );

  @override
  Future<void> crateApiWalletSpWalletScanToTip(
      {required SpWallet that,
      required String blindbitUrl,
      required int lastScan,
      required BigInt dustLimit,
      required OwnedOutPoints ownedOutpoints}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
            that, serializer);
        sse_encode_String(blindbitUrl, serializer);
        sse_encode_u_32(lastScan, serializer);
        sse_encode_u_64(dustLimit, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutPoints(
            ownedOutpoints, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 46, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletSpWalletScanToTipConstMeta,
      argValues: [that, blindbitUrl, lastScan, dustLimit, ownedOutpoints],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletSpWalletScanToTipConstMeta =>
      const TaskConstMeta(
        debugName: "SpWallet_scan_to_tip",
        argNames: [
          "that",
          "blindbitUrl",
          "lastScan",
          "dustLimit",
          "ownedOutpoints"
        ],
      );

  @override
  ApiSetupResult crateApiWalletSpWalletSetupWallet(
      {required ApiSetupWalletArgs setupArgs}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_api_setup_wallet_args(setupArgs, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 47)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_setup_result,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletSpWalletSetupWalletConstMeta,
      argValues: [setupArgs],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletSpWalletSetupWalletConstMeta =>
      const TaskConstMeta(
        debugName: "SpWallet_setup_wallet",
        argNames: ["setupArgs"],
      );

  @override
  String crateApiWalletSpWalletSignTransaction(
      {required SpWallet that,
      required ApiSilentPaymentUnsignedTransaction unsignedTransaction}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
            that, serializer);
        sse_encode_box_autoadd_api_silent_payment_unsigned_transaction(
            unsignedTransaction, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 48)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletSpWalletSignTransactionConstMeta,
      argValues: [that, unsignedTransaction],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletSpWalletSignTransactionConstMeta =>
      const TaskConstMeta(
        debugName: "SpWallet_sign_transaction",
        argNames: ["that", "unsignedTransaction"],
      );

  @override
  int crateStreamStateUpdateGetHeight({required StateUpdate that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStateUpdate(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 49)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateStreamStateUpdateGetHeightConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateStreamStateUpdateGetHeightConstMeta =>
      const TaskConstMeta(
        debugName: "StateUpdate_get_height",
        argNames: ["that"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OwnedOutPoints => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutPoints;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OwnedOutPoints => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutPoints;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OwnedOutputs => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OwnedOutputs => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SpWallet => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SpWallet => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StateUpdate => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStateUpdate;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StateUpdate => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStateUpdate;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TxHistory => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TxHistory => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  SpWallet
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
        raw);
  }

  @protected
  OwnedOutPoints
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutPoints(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OwnedOutPointsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OwnedOutputs
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OwnedOutputsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SpWallet
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SpWalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StateUpdate
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStateUpdate(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StateUpdateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TxHistory
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TxHistoryImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OwnedOutputs
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OwnedOutputsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TxHistory
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TxHistoryImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OwnedOutputs
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OwnedOutputsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SpWallet
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SpWalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StateUpdate
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStateUpdate(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StateUpdateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TxHistory
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TxHistoryImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Map<String, ApiOwnedOutput> dco_decode_Map_String_api_owned_output(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_api_owned_output(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  OwnedOutPoints
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutPoints(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OwnedOutPointsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OwnedOutputs
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OwnedOutputsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SpWallet
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SpWalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StateUpdate
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStateUpdate(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StateUpdateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TxHistory
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TxHistoryImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<StateUpdate>
      dco_decode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStateUpdate_Sse(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<LogEntry> dco_decode_StreamSink_log_entry_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<ScanProgress> dco_decode_StreamSink_scan_progress_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  ApiAmount dco_decode_api_amount(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ApiAmount(
      field0: dco_decode_u_64(arr[0]),
    );
  }

  @protected
  ApiOutputSpendStatus dco_decode_api_output_spend_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ApiOutputSpendStatus_Unspent();
      case 1:
        return ApiOutputSpendStatus_Spent(
          dco_decode_String(raw[1]),
        );
      case 2:
        return ApiOutputSpendStatus_Mined(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ApiOwnedOutput dco_decode_api_owned_output(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return ApiOwnedOutput(
      blockheight: dco_decode_u_32(arr[0]),
      tweak: dco_decode_u_8_array_32(arr[1]),
      amount: dco_decode_api_amount(arr[2]),
      script: dco_decode_String(arr[3]),
      label: dco_decode_opt_String(arr[4]),
      spendStatus: dco_decode_api_output_spend_status(arr[5]),
    );
  }

  @protected
  ApiRecipient dco_decode_api_recipient(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ApiRecipient(
      address: dco_decode_String(arr[0]),
      amount: dco_decode_api_amount(arr[1]),
    );
  }

  @protected
  ApiRecordedTransaction dco_decode_api_recorded_transaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ApiRecordedTransaction_Incoming(
          dco_decode_box_autoadd_api_recorded_transaction_incoming(raw[1]),
        );
      case 1:
        return ApiRecordedTransaction_Outgoing(
          dco_decode_box_autoadd_api_recorded_transaction_outgoing(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ApiRecordedTransactionIncoming dco_decode_api_recorded_transaction_incoming(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ApiRecordedTransactionIncoming(
      txid: dco_decode_String(arr[0]),
      amount: dco_decode_api_amount(arr[1]),
      confirmedAt: dco_decode_opt_box_autoadd_u_32(arr[2]),
    );
  }

  @protected
  ApiRecordedTransactionOutgoing dco_decode_api_recorded_transaction_outgoing(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return ApiRecordedTransactionOutgoing(
      txid: dco_decode_String(arr[0]),
      spentOutpoints: dco_decode_list_String(arr[1]),
      recipients: dco_decode_list_api_recipient(arr[2]),
      confirmedAt: dco_decode_opt_box_autoadd_u_32(arr[3]),
      change: dco_decode_api_amount(arr[4]),
    );
  }

  @protected
  ApiSetupResult dco_decode_api_setup_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ApiSetupResult(
      wallet:
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
              arr[0]),
      mnemonic: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  ApiSetupWalletArgs dco_decode_api_setup_wallet_args(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ApiSetupWalletArgs(
      setupType: dco_decode_api_setup_wallet_type(arr[0]),
      birthday: dco_decode_u_32(arr[1]),
      network: dco_decode_String(arr[2]),
    );
  }

  @protected
  ApiSetupWalletType dco_decode_api_setup_wallet_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ApiSetupWalletType_NewWallet();
      case 1:
        return ApiSetupWalletType_Mnemonic(
          dco_decode_String(raw[1]),
        );
      case 2:
        return ApiSetupWalletType_Full(
          dco_decode_String(raw[1]),
          dco_decode_String(raw[2]),
        );
      case 3:
        return ApiSetupWalletType_WatchOnly(
          dco_decode_String(raw[1]),
          dco_decode_String(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ApiSilentPaymentUnsignedTransaction
      dco_decode_api_silent_payment_unsigned_transaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return ApiSilentPaymentUnsignedTransaction(
      selectedUtxos: dco_decode_list_record_string_api_owned_output(arr[0]),
      recipients: dco_decode_list_api_recipient(arr[1]),
      partialSecret: dco_decode_u_8_array_32(arr[2]),
      unsignedTx: dco_decode_opt_String(arr[3]),
      network: dco_decode_String(arr[4]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  OwnedOutputs
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
        raw);
  }

  @protected
  TxHistory
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
        raw);
  }

  @protected
  ApiAmount dco_decode_box_autoadd_api_amount(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_amount(raw);
  }

  @protected
  ApiRecordedTransactionIncoming
      dco_decode_box_autoadd_api_recorded_transaction_incoming(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_recorded_transaction_incoming(raw);
  }

  @protected
  ApiRecordedTransactionOutgoing
      dco_decode_box_autoadd_api_recorded_transaction_outgoing(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_recorded_transaction_outgoing(raw);
  }

  @protected
  ApiSetupWalletArgs dco_decode_box_autoadd_api_setup_wallet_args(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_setup_wallet_args(raw);
  }

  @protected
  ApiSilentPaymentUnsignedTransaction
      dco_decode_box_autoadd_api_silent_payment_unsigned_transaction(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_silent_payment_unsigned_transaction(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<ApiRecipient> dco_decode_list_api_recipient(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_api_recipient).toList();
  }

  @protected
  List<ApiRecordedTransaction> dco_decode_list_api_recorded_transaction(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_api_recorded_transaction)
        .toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, ApiOwnedOutput)> dco_decode_list_record_string_api_owned_output(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_api_owned_output)
        .toList();
  }

  @protected
  LogEntry dco_decode_log_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return LogEntry(
      timeMillis: dco_decode_i_64(arr[0]),
      level: dco_decode_String(arr[1]),
      tag: dco_decode_String(arr[2]),
      msg: dco_decode_String(arr[3]),
    );
  }

  @protected
  LogLevel dco_decode_log_level(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LogLevel.values[raw as int];
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  OwnedOutputs?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
            raw);
  }

  @protected
  TxHistory?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
            raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  (String, ApiOwnedOutput) dco_decode_record_string_api_owned_output(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_api_owned_output(arr[1]),
    );
  }

  @protected
  ScanProgress dco_decode_scan_progress(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ScanProgress(
      start: dco_decode_u_32(arr[0]),
      current: dco_decode_u_32(arr[1]),
      end: dco_decode_u_32(arr[2]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  U8Array32 dco_decode_u_8_array_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8Array32(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  SpWallet
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
            deserializer);
    return inner;
  }

  @protected
  OwnedOutPoints
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutPoints(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OwnedOutPointsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OwnedOutputs
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OwnedOutputsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SpWallet
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SpWalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StateUpdate
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStateUpdate(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StateUpdateImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TxHistory
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TxHistoryImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OwnedOutputs
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OwnedOutputsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TxHistory
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TxHistoryImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OwnedOutputs
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OwnedOutputsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SpWallet
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SpWalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StateUpdate
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStateUpdate(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StateUpdateImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TxHistory
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TxHistoryImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Map<String, ApiOwnedOutput> sse_decode_Map_String_api_owned_output(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_api_owned_output(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  OwnedOutPoints
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutPoints(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OwnedOutPointsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OwnedOutputs
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OwnedOutputsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SpWallet
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SpWalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StateUpdate
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStateUpdate(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StateUpdateImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TxHistory
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TxHistoryImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<StateUpdate>
      sse_decode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStateUpdate_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<LogEntry> sse_decode_StreamSink_log_entry_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<ScanProgress> sse_decode_StreamSink_scan_progress_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  ApiAmount sse_decode_api_amount(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_64(deserializer);
    return ApiAmount(field0: var_field0);
  }

  @protected
  ApiOutputSpendStatus sse_decode_api_output_spend_status(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return ApiOutputSpendStatus_Unspent();
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return ApiOutputSpendStatus_Spent(var_field0);
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        return ApiOutputSpendStatus_Mined(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ApiOwnedOutput sse_decode_api_owned_output(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_blockheight = sse_decode_u_32(deserializer);
    var var_tweak = sse_decode_u_8_array_32(deserializer);
    var var_amount = sse_decode_api_amount(deserializer);
    var var_script = sse_decode_String(deserializer);
    var var_label = sse_decode_opt_String(deserializer);
    var var_spendStatus = sse_decode_api_output_spend_status(deserializer);
    return ApiOwnedOutput(
        blockheight: var_blockheight,
        tweak: var_tweak,
        amount: var_amount,
        script: var_script,
        label: var_label,
        spendStatus: var_spendStatus);
  }

  @protected
  ApiRecipient sse_decode_api_recipient(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_address = sse_decode_String(deserializer);
    var var_amount = sse_decode_api_amount(deserializer);
    return ApiRecipient(address: var_address, amount: var_amount);
  }

  @protected
  ApiRecordedTransaction sse_decode_api_recorded_transaction(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_box_autoadd_api_recorded_transaction_incoming(
                deserializer);
        return ApiRecordedTransaction_Incoming(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_api_recorded_transaction_outgoing(
                deserializer);
        return ApiRecordedTransaction_Outgoing(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ApiRecordedTransactionIncoming sse_decode_api_recorded_transaction_incoming(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_txid = sse_decode_String(deserializer);
    var var_amount = sse_decode_api_amount(deserializer);
    var var_confirmedAt = sse_decode_opt_box_autoadd_u_32(deserializer);
    return ApiRecordedTransactionIncoming(
        txid: var_txid, amount: var_amount, confirmedAt: var_confirmedAt);
  }

  @protected
  ApiRecordedTransactionOutgoing sse_decode_api_recorded_transaction_outgoing(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_txid = sse_decode_String(deserializer);
    var var_spentOutpoints = sse_decode_list_String(deserializer);
    var var_recipients = sse_decode_list_api_recipient(deserializer);
    var var_confirmedAt = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_change = sse_decode_api_amount(deserializer);
    return ApiRecordedTransactionOutgoing(
        txid: var_txid,
        spentOutpoints: var_spentOutpoints,
        recipients: var_recipients,
        confirmedAt: var_confirmedAt,
        change: var_change);
  }

  @protected
  ApiSetupResult sse_decode_api_setup_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_wallet =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
            deserializer);
    var var_mnemonic = sse_decode_opt_String(deserializer);
    return ApiSetupResult(wallet: var_wallet, mnemonic: var_mnemonic);
  }

  @protected
  ApiSetupWalletArgs sse_decode_api_setup_wallet_args(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_setupType = sse_decode_api_setup_wallet_type(deserializer);
    var var_birthday = sse_decode_u_32(deserializer);
    var var_network = sse_decode_String(deserializer);
    return ApiSetupWalletArgs(
        setupType: var_setupType, birthday: var_birthday, network: var_network);
  }

  @protected
  ApiSetupWalletType sse_decode_api_setup_wallet_type(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return ApiSetupWalletType_NewWallet();
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return ApiSetupWalletType_Mnemonic(var_field0);
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        var var_field1 = sse_decode_String(deserializer);
        return ApiSetupWalletType_Full(var_field0, var_field1);
      case 3:
        var var_field0 = sse_decode_String(deserializer);
        var var_field1 = sse_decode_String(deserializer);
        return ApiSetupWalletType_WatchOnly(var_field0, var_field1);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ApiSilentPaymentUnsignedTransaction
      sse_decode_api_silent_payment_unsigned_transaction(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_selectedUtxos =
        sse_decode_list_record_string_api_owned_output(deserializer);
    var var_recipients = sse_decode_list_api_recipient(deserializer);
    var var_partialSecret = sse_decode_u_8_array_32(deserializer);
    var var_unsignedTx = sse_decode_opt_String(deserializer);
    var var_network = sse_decode_String(deserializer);
    return ApiSilentPaymentUnsignedTransaction(
        selectedUtxos: var_selectedUtxos,
        recipients: var_recipients,
        partialSecret: var_partialSecret,
        unsignedTx: var_unsignedTx,
        network: var_network);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  OwnedOutputs
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
        deserializer));
  }

  @protected
  TxHistory
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
        deserializer));
  }

  @protected
  ApiAmount sse_decode_box_autoadd_api_amount(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_amount(deserializer));
  }

  @protected
  ApiRecordedTransactionIncoming
      sse_decode_box_autoadd_api_recorded_transaction_incoming(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_recorded_transaction_incoming(deserializer));
  }

  @protected
  ApiRecordedTransactionOutgoing
      sse_decode_box_autoadd_api_recorded_transaction_outgoing(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_recorded_transaction_outgoing(deserializer));
  }

  @protected
  ApiSetupWalletArgs sse_decode_box_autoadd_api_setup_wallet_args(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_setup_wallet_args(deserializer));
  }

  @protected
  ApiSilentPaymentUnsignedTransaction
      sse_decode_box_autoadd_api_silent_payment_unsigned_transaction(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_silent_payment_unsigned_transaction(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApiRecipient> sse_decode_list_api_recipient(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApiRecipient>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_api_recipient(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApiRecordedTransaction> sse_decode_list_api_recorded_transaction(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApiRecordedTransaction>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_api_recorded_transaction(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, ApiOwnedOutput)> sse_decode_list_record_string_api_owned_output(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, ApiOwnedOutput)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_api_owned_output(deserializer));
    }
    return ans_;
  }

  @protected
  LogEntry sse_decode_log_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_timeMillis = sse_decode_i_64(deserializer);
    var var_level = sse_decode_String(deserializer);
    var var_tag = sse_decode_String(deserializer);
    var var_msg = sse_decode_String(deserializer);
    return LogEntry(
        timeMillis: var_timeMillis,
        level: var_level,
        tag: var_tag,
        msg: var_msg);
  }

  @protected
  LogLevel sse_decode_log_level(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return LogLevel.values[inner];
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  OwnedOutputs?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  TxHistory?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (String, ApiOwnedOutput) sse_decode_record_string_api_owned_output(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_api_owned_output(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  ScanProgress sse_decode_scan_progress(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_start = sse_decode_u_32(deserializer);
    var var_current = sse_decode_u_32(deserializer);
    var var_end = sse_decode_u_32(deserializer);
    return ScanProgress(start: var_start, current: var_current, end: var_end);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  U8Array32 sse_decode_u_8_array_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array32(inner);
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
          SpWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
        self, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutPoints(
          OwnedOutPoints self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OwnedOutPointsImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
          OwnedOutputs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OwnedOutputsImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
          SpWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SpWalletImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStateUpdate(
          StateUpdate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StateUpdateImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
          TxHistory self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TxHistoryImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
          OwnedOutputs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OwnedOutputsImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
          TxHistory self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TxHistoryImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
          OwnedOutputs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OwnedOutputsImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
          SpWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SpWalletImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStateUpdate(
          StateUpdate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StateUpdateImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
          TxHistory self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TxHistoryImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_Map_String_api_owned_output(
      Map<String, ApiOwnedOutput> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_api_owned_output(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutPoints(
          OwnedOutPoints self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OwnedOutPointsImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
          OwnedOutputs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OwnedOutputsImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
          SpWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SpWalletImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStateUpdate(
          StateUpdate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StateUpdateImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
          TxHistory self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TxHistoryImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStateUpdate_Sse(
          RustStreamSink<StateUpdate> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStateUpdate,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_log_entry_Sse(
      RustStreamSink<LogEntry> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_log_entry,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_scan_progress_Sse(
      RustStreamSink<ScanProgress> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_scan_progress,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_api_amount(ApiAmount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.field0, serializer);
  }

  @protected
  void sse_encode_api_output_spend_status(
      ApiOutputSpendStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ApiOutputSpendStatus_Unspent():
        sse_encode_i_32(0, serializer);
      case ApiOutputSpendStatus_Spent(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      case ApiOutputSpendStatus_Mined(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_api_owned_output(
      ApiOwnedOutput self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.blockheight, serializer);
    sse_encode_u_8_array_32(self.tweak, serializer);
    sse_encode_api_amount(self.amount, serializer);
    sse_encode_String(self.script, serializer);
    sse_encode_opt_String(self.label, serializer);
    sse_encode_api_output_spend_status(self.spendStatus, serializer);
  }

  @protected
  void sse_encode_api_recipient(ApiRecipient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.address, serializer);
    sse_encode_api_amount(self.amount, serializer);
  }

  @protected
  void sse_encode_api_recorded_transaction(
      ApiRecordedTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ApiRecordedTransaction_Incoming(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_api_recorded_transaction_incoming(
            field0, serializer);
      case ApiRecordedTransaction_Outgoing(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_api_recorded_transaction_outgoing(
            field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_api_recorded_transaction_incoming(
      ApiRecordedTransactionIncoming self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.txid, serializer);
    sse_encode_api_amount(self.amount, serializer);
    sse_encode_opt_box_autoadd_u_32(self.confirmedAt, serializer);
  }

  @protected
  void sse_encode_api_recorded_transaction_outgoing(
      ApiRecordedTransactionOutgoing self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.txid, serializer);
    sse_encode_list_String(self.spentOutpoints, serializer);
    sse_encode_list_api_recipient(self.recipients, serializer);
    sse_encode_opt_box_autoadd_u_32(self.confirmedAt, serializer);
    sse_encode_api_amount(self.change, serializer);
  }

  @protected
  void sse_encode_api_setup_result(
      ApiSetupResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpWallet(
        self.wallet, serializer);
    sse_encode_opt_String(self.mnemonic, serializer);
  }

  @protected
  void sse_encode_api_setup_wallet_args(
      ApiSetupWalletArgs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_setup_wallet_type(self.setupType, serializer);
    sse_encode_u_32(self.birthday, serializer);
    sse_encode_String(self.network, serializer);
  }

  @protected
  void sse_encode_api_setup_wallet_type(
      ApiSetupWalletType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ApiSetupWalletType_NewWallet():
        sse_encode_i_32(0, serializer);
      case ApiSetupWalletType_Mnemonic(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      case ApiSetupWalletType_Full(field0: final field0, field1: final field1):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
        sse_encode_String(field1, serializer);
      case ApiSetupWalletType_WatchOnly(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(3, serializer);
        sse_encode_String(field0, serializer);
        sse_encode_String(field1, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_api_silent_payment_unsigned_transaction(
      ApiSilentPaymentUnsignedTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_api_owned_output(
        self.selectedUtxos, serializer);
    sse_encode_list_api_recipient(self.recipients, serializer);
    sse_encode_u_8_array_32(self.partialSecret, serializer);
    sse_encode_opt_String(self.unsignedTx, serializer);
    sse_encode_String(self.network, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
          OwnedOutputs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
        self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
          TxHistory self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_amount(
      ApiAmount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_amount(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_recorded_transaction_incoming(
      ApiRecordedTransactionIncoming self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_recorded_transaction_incoming(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_recorded_transaction_outgoing(
      ApiRecordedTransactionOutgoing self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_recorded_transaction_outgoing(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_setup_wallet_args(
      ApiSetupWalletArgs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_setup_wallet_args(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_silent_payment_unsigned_transaction(
      ApiSilentPaymentUnsignedTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_silent_payment_unsigned_transaction(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_api_recipient(
      List<ApiRecipient> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_api_recipient(item, serializer);
    }
  }

  @protected
  void sse_encode_list_api_recorded_transaction(
      List<ApiRecordedTransaction> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_api_recorded_transaction(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_api_owned_output(
      List<(String, ApiOwnedOutput)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_api_owned_output(item, serializer);
    }
  }

  @protected
  void sse_encode_log_entry(LogEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.timeMillis, serializer);
    sse_encode_String(self.level, serializer);
    sse_encode_String(self.tag, serializer);
    sse_encode_String(self.msg, serializer);
  }

  @protected
  void sse_encode_log_level(LogLevel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
          OwnedOutputs? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedOutputs(
          self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
          TxHistory? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTxHistory(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_record_string_api_owned_output(
      (String, ApiOwnedOutput) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_api_owned_output(self.$2, serializer);
  }

  @protected
  void sse_encode_scan_progress(ScanProgress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.start, serializer);
    sse_encode_u_32(self.current, serializer);
    sse_encode_u_32(self.end, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_u_8_array_32(U8Array32 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class OwnedOutPointsImpl extends RustOpaque implements OwnedOutPoints {
  // Not to be used by end users
  OwnedOutPointsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OwnedOutPointsImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_OwnedOutPoints,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_OwnedOutPoints,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_OwnedOutPointsPtr,
  );
}

@sealed
class OwnedOutputsImpl extends RustOpaque implements OwnedOutputs {
  // Not to be used by end users
  OwnedOutputsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OwnedOutputsImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_OwnedOutputs,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_OwnedOutputs,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_OwnedOutputsPtr,
  );

  String encode() => RustLib.instance.api.crateApiOutputsOwnedOutputsEncode(
        that: this,
      );

  OwnedOutPoints getUnconfirmedSpentOutpoints() => RustLib.instance.api
          .crateApiOutputsOwnedOutputsGetUnconfirmedSpentOutpoints(
        that: this,
      );

  BigInt getUnspentAmount() =>
      RustLib.instance.api.crateApiOutputsOwnedOutputsGetUnspentAmount(
        that: this,
      );

  Map<String, ApiOwnedOutput> getUnspentOutputs() =>
      RustLib.instance.api.crateApiOutputsOwnedOutputsGetUnspentOutputs(
        that: this,
      );

  void markOutpointsSpent(
          {required String spentBy, required List<String> spent}) =>
      RustLib.instance.api.crateApiOutputsOwnedOutputsMarkOutpointsSpent(
          that: this, spentBy: spentBy, spent: spent);

  void processStateUpdate({required StateUpdate update}) =>
      RustLib.instance.api.crateApiOutputsOwnedOutputsProcessStateUpdate(
          that: this, update: update);

  void resetToHeight({required int height}) => RustLib.instance.api
      .crateApiOutputsOwnedOutputsResetToHeight(that: this, height: height);
}

@sealed
class SpWalletImpl extends RustOpaque implements SpWallet {
  // Not to be used by end users
  SpWalletImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SpWalletImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SpWallet,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SpWallet,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SpWalletPtr,
  );

  ApiSilentPaymentUnsignedTransaction createDrainTransaction(
          {required Map<String, ApiOwnedOutput> apiOutputs,
          required String wipeAddress,
          required double feerate,
          required String network}) =>
      RustLib.instance.api.crateApiWalletSpWalletCreateDrainTransaction(
          that: this,
          apiOutputs: apiOutputs,
          wipeAddress: wipeAddress,
          feerate: feerate,
          network: network);

  ApiSilentPaymentUnsignedTransaction createNewTransaction(
          {required Map<String, ApiOwnedOutput> apiOutputs,
          required List<ApiRecipient> apiRecipients,
          required double feerate,
          required String network}) =>
      RustLib.instance.api.crateApiWalletSpWalletCreateNewTransaction(
          that: this,
          apiOutputs: apiOutputs,
          apiRecipients: apiRecipients,
          feerate: feerate,
          network: network);

  String encode() => RustLib.instance.api.crateApiWalletSpWalletEncode(
        that: this,
      );

  int getBirthday() => RustLib.instance.api.crateApiWalletSpWalletGetBirthday(
        that: this,
      );

  String getChangeAddress() =>
      RustLib.instance.api.crateApiWalletSpWalletGetChangeAddress(
        that: this,
      );

  String getNetwork() => RustLib.instance.api.crateApiWalletSpWalletGetNetwork(
        that: this,
      );

  String getReceivingAddress() =>
      RustLib.instance.api.crateApiWalletSpWalletGetReceivingAddress(
        that: this,
      );

  /// Only call this when we expect this value to be present
  int? getWalletLastScan() =>
      RustLib.instance.api.crateApiWalletSpWalletGetWalletLastScan(
        that: this,
      );

  /// Only call this when we expect this value to be present
  OwnedOutputs? getWalletOwnedOutputs() =>
      RustLib.instance.api.crateApiWalletSpWalletGetWalletOwnedOutputs(
        that: this,
      );

  /// Only call this when we expect this value to be present
  TxHistory? getWalletTxHistory() =>
      RustLib.instance.api.crateApiWalletSpWalletGetWalletTxHistory(
        that: this,
      );

  Future<void> scanToTip(
          {required String blindbitUrl,
          required int lastScan,
          required BigInt dustLimit,
          required OwnedOutPoints ownedOutpoints}) =>
      RustLib.instance.api.crateApiWalletSpWalletScanToTip(
          that: this,
          blindbitUrl: blindbitUrl,
          lastScan: lastScan,
          dustLimit: dustLimit,
          ownedOutpoints: ownedOutpoints);

  String signTransaction(
          {required ApiSilentPaymentUnsignedTransaction unsignedTransaction}) =>
      RustLib.instance.api.crateApiWalletSpWalletSignTransaction(
          that: this, unsignedTransaction: unsignedTransaction);
}

@sealed
class StateUpdateImpl extends RustOpaque implements StateUpdate {
  // Not to be used by end users
  StateUpdateImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StateUpdateImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_StateUpdate,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_StateUpdate,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_StateUpdatePtr,
  );

  int getHeight() => RustLib.instance.api.crateStreamStateUpdateGetHeight(
        that: this,
      );
}

@sealed
class TxHistoryImpl extends RustOpaque implements TxHistory {
  // Not to be used by end users
  TxHistoryImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  TxHistoryImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_TxHistory,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_TxHistory,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_TxHistoryPtr,
  );

  void addOutgoingTxToHistory(
          {required String txid,
          required List<String> spentOutpoints,
          required List<ApiRecipient> recipients,
          required ApiAmount change}) =>
      RustLib.instance.api.crateApiHistoryTxHistoryAddOutgoingTxToHistory(
          that: this,
          txid: txid,
          spentOutpoints: spentOutpoints,
          recipients: recipients,
          change: change);

  String encode() => RustLib.instance.api.crateApiHistoryTxHistoryEncode(
        that: this,
      );

  BigInt getUnconfirmedChange() =>
      RustLib.instance.api.crateApiHistoryTxHistoryGetUnconfirmedChange(
        that: this,
      );

  void processStateUpdate({required StateUpdate update}) => RustLib.instance.api
      .crateApiHistoryTxHistoryProcessStateUpdate(that: this, update: update);

  void resetToHeight({required int height}) => RustLib.instance.api
      .crateApiHistoryTxHistoryResetToHeight(that: this, height: height);

  List<ApiRecordedTransaction> toApiTransactions() =>
      RustLib.instance.api.crateApiHistoryTxHistoryToApiTransactions(
        that: this,
      );
}
