// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../lib.dart';
import 'history.dart';
import 'outputs.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'structs.dart';

// These functions are ignored because they are not marked as `pub`: `new`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SpWallet>>
abstract class SpWallet implements RustOpaqueInterface {
  static Future<String> broadcastTx(
          {required String tx, required String network}) =>
      RustLib.instance.api
          .crateApiWalletSpWalletBroadcastTx(tx: tx, network: network);

  ApiSilentPaymentUnsignedTransaction createDrainTransaction(
      {required Map<String, ApiOwnedOutput> apiOutputs,
      required String wipeAddress,
      required double feerate,
      required String network});

  ApiSilentPaymentUnsignedTransaction createNewTransaction(
      {required Map<String, ApiOwnedOutput> apiOutputs,
      required List<ApiRecipient> apiRecipients,
      required double feerate,
      required String network});

  static SpWallet decode({required String encodedWallet}) =>
      RustLib.instance.api
          .crateApiWalletSpWalletDecode(encodedWallet: encodedWallet);

  String encode();

  static ApiSilentPaymentUnsignedTransaction finalizeTransaction(
          {required ApiSilentPaymentUnsignedTransaction unsignedTransaction}) =>
      RustLib.instance.api.crateApiWalletSpWalletFinalizeTransaction(
          unsignedTransaction: unsignedTransaction);

  int getBirthday();

  String getChangeAddress();

  String getNetwork();

  String getReceivingAddress();

  /// Only call this when we expect this value to be present
  int? getWalletLastScan();

  /// Only call this when we expect this value to be present
  OwnedOutputs? getWalletOwnedOutputs();

  /// Only call this when we expect this value to be present
  TxHistory? getWalletTxHistory();

  static void interruptScanning() =>
      RustLib.instance.api.crateApiWalletSpWalletInterruptScanning();

  Future<void> scanToTip(
      {required String blindbitUrl,
      required int lastScan,
      required BigInt dustLimit,
      required TxHistory txHistory,
      required OwnedOutputs ownedOutputs});

  static ApiSetupResult setupWallet({required ApiSetupWalletArgs setupArgs}) =>
      RustLib.instance.api
          .crateApiWalletSpWalletSetupWallet(setupArgs: setupArgs);

  String signTransaction(
      {required ApiSilentPaymentUnsignedTransaction unsignedTransaction});
}
